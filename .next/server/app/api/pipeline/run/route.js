"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/pipeline/run/route";
exports.ids = ["app/api/pipeline/run/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fpipeline%2Frun%2Froute&page=%2Fapi%2Fpipeline%2Frun%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fpipeline%2Frun%2Froute.ts&appDir=%2FUsers%2Fjb%2FDevelopment%2Foffice_football_pool%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fjb%2FDevelopment%2Foffice_football_pool&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fpipeline%2Frun%2Froute&page=%2Fapi%2Fpipeline%2Frun%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fpipeline%2Frun%2Froute.ts&appDir=%2FUsers%2Fjb%2FDevelopment%2Foffice_football_pool%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fjb%2FDevelopment%2Foffice_football_pool&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_jb_Development_office_football_pool_src_app_api_pipeline_run_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/pipeline/run/route.ts */ \"(rsc)/./src/app/api/pipeline/run/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/pipeline/run/route\",\n        pathname: \"/api/pipeline/run\",\n        filename: \"route\",\n        bundlePath: \"app/api/pipeline/run/route\"\n    },\n    resolvedPagePath: \"/Users/jb/Development/office_football_pool/src/app/api/pipeline/run/route.ts\",\n    nextConfigOutput,\n    userland: _Users_jb_Development_office_football_pool_src_app_api_pipeline_run_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks } = routeModule;\nconst originalPathname = \"/api/pipeline/run/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZwaXBlbGluZSUyRnJ1biUyRnJvdXRlJnBhZ2U9JTJGYXBpJTJGcGlwZWxpbmUlMkZydW4lMkZyb3V0ZSZhcHBQYXRocz0mcGFnZVBhdGg9cHJpdmF0ZS1uZXh0LWFwcC1kaXIlMkZhcGklMkZwaXBlbGluZSUyRnJ1biUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmpiJTJGRGV2ZWxvcG1lbnQlMkZvZmZpY2VfZm9vdGJhbGxfcG9vbCUyRnNyYyUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZqYiUyRkRldmVsb3BtZW50JTJGb2ZmaWNlX2Zvb3RiYWxsX3Bvb2wmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7OztBQUFzRztBQUN2QztBQUNjO0FBQzRCO0FBQ3pHO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixnSEFBbUI7QUFDM0M7QUFDQSxjQUFjLHlFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsaUVBQWlFO0FBQ3pFO0FBQ0E7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDdUg7O0FBRXZIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2ZmaWNlLWZvb3RiYWxsLXBvb2wvPzVjNTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2Z1dHVyZS9yb3V0ZS1raW5kXCI7XG5pbXBvcnQgeyBwYXRjaEZldGNoIGFzIF9wYXRjaEZldGNoIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvbGliL3BhdGNoLWZldGNoXCI7XG5pbXBvcnQgKiBhcyB1c2VybGFuZCBmcm9tIFwiL1VzZXJzL2piL0RldmVsb3BtZW50L29mZmljZV9mb290YmFsbF9wb29sL3NyYy9hcHAvYXBpL3BpcGVsaW5lL3J1bi9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvcGlwZWxpbmUvcnVuL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvcGlwZWxpbmUvcnVuXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9waXBlbGluZS9ydW4vcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvamIvRGV2ZWxvcG1lbnQvb2ZmaWNlX2Zvb3RiYWxsX3Bvb2wvc3JjL2FwcC9hcGkvcGlwZWxpbmUvcnVuL3JvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MgfSA9IHJvdXRlTW9kdWxlO1xuY29uc3Qgb3JpZ2luYWxQYXRobmFtZSA9IFwiL2FwaS9waXBlbGluZS9ydW4vcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgb3JpZ2luYWxQYXRobmFtZSwgcGF0Y2hGZXRjaCwgIH07XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcC1yb3V0ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fpipeline%2Frun%2Froute&page=%2Fapi%2Fpipeline%2Frun%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fpipeline%2Frun%2Froute.ts&appDir=%2FUsers%2Fjb%2FDevelopment%2Foffice_football_pool%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fjb%2FDevelopment%2Foffice_football_pool&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/pipeline/run/route.ts":
/*!*******************************************!*\
  !*** ./src/app/api/pipeline/run/route.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _services_pipeline_orchestrator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/services/pipeline-orchestrator */ \"(rsc)/./src/services/pipeline-orchestrator.ts\");\n\n\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        // Validate input\n        if (!body.picksheetText && !body.picksheetGames) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"Either picksheetText or picksheetGames must be provided\"\n            }, {\n                status: 400\n            });\n        }\n        // Run pipeline\n        const result = await _services_pipeline_orchestrator__WEBPACK_IMPORTED_MODULE_1__.pipelineOrchestrator.runPipeline({\n            picksheetText: body.picksheetText,\n            picksheetGames: body.picksheetGames,\n            marketGames: body.marketGames\n        }, {\n            useOddsAPI: body.useOddsAPI ?? true,\n            useLLM: body.useLLM ?? true,\n            includeLogs: body.includeLogs ?? false,\n            matchingThreshold: body.matchingThreshold ?? 0.6\n        });\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            success: result.status !== \"failed\",\n            pipeline: result\n        });\n    } catch (error) {\n        console.error(\"Pipeline execution error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: \"Pipeline execution failed\",\n            message: error instanceof Error ? error.message : \"Unknown error\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zcmMvYXBwL2FwaS9waXBlbGluZS9ydW4vcm91dGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQXVEO0FBQ2dCO0FBRWhFLGVBQWVFLEtBQUtDLE9BQW9CO0lBQzdDLElBQUk7UUFDRixNQUFNQyxPQUFPLE1BQU1ELFFBQVFFLElBQUk7UUFFL0IsaUJBQWlCO1FBQ2pCLElBQUksQ0FBQ0QsS0FBS0UsYUFBYSxJQUFJLENBQUNGLEtBQUtHLGNBQWMsRUFBRTtZQUMvQyxPQUFPUCxxREFBWUEsQ0FBQ0ssSUFBSSxDQUN0QjtnQkFBRUcsT0FBTztZQUEwRCxHQUNuRTtnQkFBRUMsUUFBUTtZQUFJO1FBRWxCO1FBRUEsZUFBZTtRQUNmLE1BQU1DLFNBQVMsTUFBTVQsaUZBQW9CQSxDQUFDVSxXQUFXLENBQ25EO1lBQ0VMLGVBQWVGLEtBQUtFLGFBQWE7WUFDakNDLGdCQUFnQkgsS0FBS0csY0FBYztZQUNuQ0ssYUFBYVIsS0FBS1EsV0FBVztRQUMvQixHQUNBO1lBQ0VDLFlBQVlULEtBQUtTLFVBQVUsSUFBSTtZQUMvQkMsUUFBUVYsS0FBS1UsTUFBTSxJQUFJO1lBQ3ZCQyxhQUFhWCxLQUFLVyxXQUFXLElBQUk7WUFDakNDLG1CQUFtQlosS0FBS1ksaUJBQWlCLElBQUk7UUFDL0M7UUFHRixPQUFPaEIscURBQVlBLENBQUNLLElBQUksQ0FBQztZQUN2QlksU0FBU1AsT0FBT0QsTUFBTSxLQUFLO1lBQzNCUyxVQUFVUjtRQUNaO0lBRUYsRUFBRSxPQUFPRixPQUFPO1FBQ2RXLFFBQVFYLEtBQUssQ0FBQyw2QkFBNkJBO1FBQzNDLE9BQU9SLHFEQUFZQSxDQUFDSyxJQUFJLENBQ3RCO1lBQ0VHLE9BQU87WUFDUFksU0FBU1osaUJBQWlCYSxRQUFRYixNQUFNWSxPQUFPLEdBQUc7UUFDcEQsR0FDQTtZQUFFWCxRQUFRO1FBQUk7SUFFbEI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL29mZmljZS1mb290YmFsbC1wb29sLy4vc3JjL2FwcC9hcGkvcGlwZWxpbmUvcnVuL3JvdXRlLnRzPzMzMTYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlcXVlc3QsIE5leHRSZXNwb25zZSB9IGZyb20gJ25leHQvc2VydmVyJ1xuaW1wb3J0IHsgcGlwZWxpbmVPcmNoZXN0cmF0b3IgfSBmcm9tICdAL3NlcnZpY2VzL3BpcGVsaW5lLW9yY2hlc3RyYXRvcidcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxdWVzdDogTmV4dFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVxdWVzdC5qc29uKClcbiAgICBcbiAgICAvLyBWYWxpZGF0ZSBpbnB1dFxuICAgIGlmICghYm9keS5waWNrc2hlZXRUZXh0ICYmICFib2R5LnBpY2tzaGVldEdhbWVzKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJyb3I6ICdFaXRoZXIgcGlja3NoZWV0VGV4dCBvciBwaWNrc2hlZXRHYW1lcyBtdXN0IGJlIHByb3ZpZGVkJyB9LFxuICAgICAgICB7IHN0YXR1czogNDAwIH1cbiAgICAgIClcbiAgICB9XG5cbiAgICAvLyBSdW4gcGlwZWxpbmVcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwaXBlbGluZU9yY2hlc3RyYXRvci5ydW5QaXBlbGluZShcbiAgICAgIHtcbiAgICAgICAgcGlja3NoZWV0VGV4dDogYm9keS5waWNrc2hlZXRUZXh0LFxuICAgICAgICBwaWNrc2hlZXRHYW1lczogYm9keS5waWNrc2hlZXRHYW1lcyxcbiAgICAgICAgbWFya2V0R2FtZXM6IGJvZHkubWFya2V0R2FtZXNcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIHVzZU9kZHNBUEk6IGJvZHkudXNlT2Rkc0FQSSA/PyB0cnVlLFxuICAgICAgICB1c2VMTE06IGJvZHkudXNlTExNID8/IHRydWUsXG4gICAgICAgIGluY2x1ZGVMb2dzOiBib2R5LmluY2x1ZGVMb2dzID8/IGZhbHNlLFxuICAgICAgICBtYXRjaGluZ1RocmVzaG9sZDogYm9keS5tYXRjaGluZ1RocmVzaG9sZCA/PyAwLjZcbiAgICAgIH1cbiAgICApXG5cbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oe1xuICAgICAgc3VjY2VzczogcmVzdWx0LnN0YXR1cyAhPT0gJ2ZhaWxlZCcsXG4gICAgICBwaXBlbGluZTogcmVzdWx0XG4gICAgfSlcblxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoJ1BpcGVsaW5lIGV4ZWN1dGlvbiBlcnJvcjonLCBlcnJvcilcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7IFxuICAgICAgICBlcnJvcjogJ1BpcGVsaW5lIGV4ZWN1dGlvbiBmYWlsZWQnLCBcbiAgICAgICAgbWVzc2FnZTogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcicgXG4gICAgICB9LFxuICAgICAgeyBzdGF0dXM6IDUwMCB9XG4gICAgKVxuICB9XG59Il0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsInBpcGVsaW5lT3JjaGVzdHJhdG9yIiwiUE9TVCIsInJlcXVlc3QiLCJib2R5IiwianNvbiIsInBpY2tzaGVldFRleHQiLCJwaWNrc2hlZXRHYW1lcyIsImVycm9yIiwic3RhdHVzIiwicmVzdWx0IiwicnVuUGlwZWxpbmUiLCJtYXJrZXRHYW1lcyIsInVzZU9kZHNBUEkiLCJ1c2VMTE0iLCJpbmNsdWRlTG9ncyIsIm1hdGNoaW5nVGhyZXNob2xkIiwic3VjY2VzcyIsInBpcGVsaW5lIiwiY29uc29sZSIsIm1lc3NhZ2UiLCJFcnJvciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/pipeline/run/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/comparison-engine.ts":
/*!*******************************************!*\
  !*** ./src/services/comparison-engine.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ComparisonEngine: () => (/* binding */ ComparisonEngine),\n/* harmony export */   comparisonEngine: () => (/* binding */ comparisonEngine)\n/* harmony export */ });\n// Key numbers in football betting\nconst KEY_NUMBERS = [\n    3,\n    7,\n    10,\n    14\n] // Most common margins of victory\n;\nclass ComparisonEngine {\n    /**\n   * Calculate spread delta between picksheet and market\n   */ calculateSpreadDelta(picksheetSpread, marketSpread) {\n        return picksheetSpread - marketSpread;\n    }\n    /**\n   * Check if spread difference crosses key numbers\n   */ checkKeyNumberCrossing(picksheetSpread, marketSpread) {\n        const crossedNumbers = [];\n        // Check each key number\n        for (const keyNum of KEY_NUMBERS){\n            // Check positive key number\n            if (picksheetSpread > keyNum && marketSpread < keyNum || picksheetSpread < keyNum && marketSpread > keyNum) {\n                crossedNumbers.push(keyNum);\n            }\n            // Check negative key number\n            if (picksheetSpread > -keyNum && marketSpread < -keyNum || picksheetSpread < -keyNum && marketSpread > -keyNum) {\n                crossedNumbers.push(-keyNum);\n            }\n        }\n        return {\n            crosses: crossedNumbers.length > 0,\n            numbers: crossedNumbers\n        };\n    }\n    /**\n   * Check if the favorite has flipped between picksheet and market\n   */ checkFavoriteFlip(picksheetSpread, marketSpread) {\n        // If signs are different, favorite has flipped\n        return picksheetSpread > 0 && marketSpread < 0 || picksheetSpread < 0 && marketSpread > 0;\n    }\n    /**\n   * Detect if teams are NFL or NCAAF based on names\n   */ detectLeague(homeTeam, awayTeam) {\n        // List of known NFL teams\n        const nflTeams = [\n            \"Cardinals\",\n            \"Falcons\",\n            \"Ravens\",\n            \"Bills\",\n            \"Panthers\",\n            \"Bears\",\n            \"Bengals\",\n            \"Browns\",\n            \"Cowboys\",\n            \"Broncos\",\n            \"Lions\",\n            \"Packers\",\n            \"Texans\",\n            \"Colts\",\n            \"Jaguars\",\n            \"Chiefs\",\n            \"Raiders\",\n            \"Chargers\",\n            \"Rams\",\n            \"Dolphins\",\n            \"Vikings\",\n            \"Patriots\",\n            \"Saints\",\n            \"Giants\",\n            \"Jets\",\n            \"Eagles\",\n            \"Steelers\",\n            \"49ers\",\n            \"Seahawks\",\n            \"Buccaneers\",\n            \"Titans\",\n            \"Commanders\",\n            \"Washington\"\n        ];\n        // Check if either team is an NFL team\n        for (const nflTeam of nflTeams){\n            if (homeTeam.includes(nflTeam) || awayTeam.includes(nflTeam)) {\n                return \"NFL\";\n            }\n        }\n        // Common NCAAF indicators - expanded list\n        const ncaafIndicators = [\n            \"State\",\n            \"University\",\n            \"College\",\n            \"Tech\",\n            \"A&M\",\n            \"Central\",\n            \"Eastern\",\n            \"Western\",\n            \"Northern\",\n            \"Southern\",\n            \"Carolina\",\n            \"Florida\",\n            \"Georgia\",\n            \"Alabama\",\n            \"Auburn\",\n            \"Tennessee\",\n            \"Kentucky\",\n            \"Virginia\",\n            \"Michigan\",\n            \"Ohio\",\n            \"Penn\",\n            \"Texas\",\n            \"Oklahoma\",\n            \"Kansas\",\n            \"Iowa\",\n            \"UCLA\",\n            \"USC\",\n            \"Stanford\",\n            \"California\",\n            \"Oregon\",\n            \"Washington\",\n            \"Arizona\",\n            \"Colorado\",\n            \"Utah\",\n            \"Nevada\",\n            \"Hawaii\",\n            \"Louisiana\",\n            \"Mississippi\",\n            \"Arkansas\",\n            \"Missouri\",\n            \"Illinois\",\n            \"Indiana\",\n            \"Wisconsin\",\n            \"Minnesota\",\n            \"Nebraska\",\n            \"Purdue\",\n            \"Northwestern\",\n            \"Rutgers\",\n            \"Maryland\",\n            \"Boston\",\n            \"Syracuse\",\n            \"Pittsburgh\",\n            \"Duke\",\n            \"Wake Forest\",\n            \"NC State\",\n            \"Clemson\",\n            \"Miami\",\n            \"FSU\",\n            \"UCF\",\n            \"USF\",\n            \"Temple\",\n            \"Navy\",\n            \"Army\",\n            \"Air Force\",\n            \"Notre Dame\",\n            \"BYU\",\n            \"TCU\",\n            \"Baylor\",\n            \"SMU\",\n            \"Houston\",\n            \"Rice\",\n            \"Tulane\",\n            \"Memphis\",\n            \"Vanderbilt\",\n            \"Ole Miss\",\n            \"LSU\"\n        ];\n        // Check for any NCAAF indicators\n        for (const indicator of ncaafIndicators){\n            if (homeTeam.includes(indicator) || awayTeam.includes(indicator)) {\n                return \"NCAAF\";\n            }\n        }\n        // If not identified as NFL and has any text, assume NCAAF\n        // (since college has many more teams)\n        return \"NCAAF\";\n    }\n    /**\n   * Compare a single game\n   */ compareGame(picksheetGame, marketGame, matchConfidence = 1.0) {\n        const spreadDelta = this.calculateSpreadDelta(picksheetGame.spread, marketGame.homeSpread);\n        const keyNumberCheck = this.checkKeyNumberCrossing(picksheetGame.spread, marketGame.homeSpread);\n        const favoriteFlipped = this.checkFavoriteFlip(picksheetGame.spread, marketGame.homeSpread);\n        // Use league from market data if available, otherwise detect\n        const league = marketGame.league || this.detectLeague(marketGame.homeTeam, marketGame.awayTeam);\n        return {\n            gameId: marketGame.gameId,\n            homeTeam: marketGame.homeTeam,\n            awayTeam: marketGame.awayTeam,\n            gameTime: marketGame.gameTime,\n            league,\n            picksheetSpread: picksheetGame.spread,\n            marketSpread: marketGame.homeSpread,\n            spreadDelta,\n            crossesKeyNumber: keyNumberCheck.crosses,\n            keyNumbersCrossed: keyNumberCheck.numbers,\n            favoriteFlipped,\n            confidence: matchConfidence,\n            matched: true\n        };\n    }\n    /**\n   * Compare multiple games and calculate KPIs\n   */ compareGames(picksheetGames, marketGames, matches) {\n        const comparisons = [];\n        const unmatchedPicksheet = new Set(picksheetGames.map((_, i)=>i));\n        const unmatchedMarket = new Set(marketGames.map((_, i)=>i));\n        // Process matches\n        for (const match of matches){\n            const picksheetGame = picksheetGames[match.picksheetIndex];\n            const marketGame = marketGames[match.marketIndex];\n            if (picksheetGame && marketGame) {\n                comparisons.push(this.compareGame(picksheetGame, marketGame, match.confidence));\n                unmatchedPicksheet.delete(match.picksheetIndex);\n                unmatchedMarket.delete(match.marketIndex);\n            }\n        }\n        // Build unmatched list\n        const unmatched = [];\n        for (const idx of Array.from(unmatchedPicksheet)){\n            const game = picksheetGames[idx];\n            unmatched.push({\n                source: \"picksheet\",\n                gameInfo: `${game.awayTeam} @ ${game.homeTeam} (${game.spread})`,\n                reason: \"No matching market game found\",\n                gameTime: game.gameTime\n            });\n        }\n        for (const idx of Array.from(unmatchedMarket)){\n            const game = marketGames[idx];\n            unmatched.push({\n                source: \"market\",\n                gameInfo: `${game.awayTeam} @ ${game.homeTeam} (${game.homeSpread})`,\n                reason: \"No matching picksheet game found\",\n                gameTime: game.gameTime\n            });\n        }\n        // Calculate KPIs\n        const kpis = this.calculateKPIs(comparisons, picksheetGames.length, unmatched.filter((u)=>u.source === \"picksheet\").length);\n        return {\n            comparisons,\n            kpis,\n            unmatched\n        };\n    }\n    /**\n   * Calculate KPIs from comparisons\n   */ calculateKPIs(comparisons, totalPicksheetGames, unmatchedPicksheetGames) {\n        const matchedGames = comparisons.length;\n        const totalGames = totalPicksheetGames;\n        if (matchedGames === 0) {\n            return {\n                totalGames,\n                matchedGames: 0,\n                unmatchedGames: unmatchedPicksheetGames,\n                matchRate: 0,\n                avgSpreadDelta: 0,\n                medianSpreadDelta: 0,\n                p95SpreadDelta: 0,\n                stdDevSpreadDelta: 0,\n                keyNumberCrossings: 0,\n                keyNumberCrossingRate: 0,\n                favoriteFlips: 0,\n                favoriteFlipRate: 0,\n                largestDelta: null,\n                timestamp: new Date().toISOString()\n            };\n        }\n        // Extract deltas\n        const deltas = comparisons.map((c)=>Math.abs(c.spreadDelta));\n        // Calculate average\n        const avgSpreadDelta = deltas.reduce((sum, d)=>sum + d, 0) / deltas.length;\n        // Calculate median\n        const sortedDeltas = [\n            ...deltas\n        ].sort((a, b)=>a - b);\n        const medianSpreadDelta = sortedDeltas[Math.floor(sortedDeltas.length / 2)];\n        // Calculate 95th percentile\n        const p95Index = Math.floor(sortedDeltas.length * 0.95);\n        const p95SpreadDelta = sortedDeltas[Math.min(p95Index, sortedDeltas.length - 1)];\n        // Calculate standard deviation\n        const variance = deltas.reduce((sum, d)=>sum + Math.pow(d - avgSpreadDelta, 2), 0) / deltas.length;\n        const stdDevSpreadDelta = Math.sqrt(variance);\n        // Count key number crossings\n        const keyNumberCrossings = comparisons.filter((c)=>c.crossesKeyNumber).length;\n        const keyNumberCrossingRate = keyNumberCrossings / matchedGames;\n        // Count favorite flips\n        const favoriteFlips = comparisons.filter((c)=>c.favoriteFlipped).length;\n        const favoriteFlipRate = favoriteFlips / matchedGames;\n        // Find largest delta\n        let largestDelta = null;\n        if (comparisons.length > 0) {\n            const maxComparison = comparisons.reduce((max, c)=>Math.abs(c.spreadDelta) > Math.abs(max.spreadDelta) ? c : max);\n            largestDelta = {\n                gameId: maxComparison.gameId,\n                teams: `${maxComparison.awayTeam} @ ${maxComparison.homeTeam}`,\n                delta: maxComparison.spreadDelta\n            };\n        }\n        return {\n            totalGames,\n            matchedGames,\n            unmatchedGames: unmatchedPicksheetGames,\n            matchRate: matchedGames / totalGames,\n            avgSpreadDelta: Number(avgSpreadDelta.toFixed(2)),\n            medianSpreadDelta: Number(medianSpreadDelta.toFixed(2)),\n            p95SpreadDelta: Number(p95SpreadDelta.toFixed(2)),\n            stdDevSpreadDelta: Number(stdDevSpreadDelta.toFixed(2)),\n            keyNumberCrossings,\n            keyNumberCrossingRate: Number(keyNumberCrossingRate.toFixed(3)),\n            favoriteFlips,\n            favoriteFlipRate: Number(favoriteFlipRate.toFixed(3)),\n            largestDelta,\n            timestamp: new Date().toISOString()\n        };\n    }\n    /**\n   * Format spread for display (e.g., \"DAL -3.5\" or \"PHI +7\")\n   */ static formatSpread(team, spread) {\n        if (spread === 0) return `${team} PK`;\n        const sign = spread > 0 ? \"+\" : \"\";\n        return `${team} ${sign}${spread}`;\n    }\n    /**\n   * Get risk level based on spread delta\n   */ static getRiskLevel(delta) {\n        const absDelta = Math.abs(delta);\n        if (absDelta <= 2) return \"low\";\n        if (absDelta <= 4) return \"medium\";\n        if (absDelta <= 7) return \"high\";\n        return \"critical\";\n    }\n    /**\n   * Get color class for risk level\n   */ static getRiskColor(riskLevel) {\n        switch(riskLevel){\n            case \"low\":\n                return \"text-green-600\";\n            case \"medium\":\n                return \"text-yellow-600\";\n            case \"high\":\n                return \"text-orange-600\";\n            case \"critical\":\n                return \"text-red-600\";\n            default:\n                return \"text-gray-600\";\n        }\n    }\n}\n// Export singleton instance\nconst comparisonEngine = new ComparisonEngine();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/comparison-engine.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/entity-resolution.ts":
/*!*******************************************!*\
  !*** ./src/services/entity-resolution.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   EntityResolver: () => (/* binding */ EntityResolver)\n/* harmony export */ });\n/* harmony import */ var fuse_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! fuse.js */ \"(rsc)/./node_modules/fuse.js/dist/fuse.mjs\");\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n\n\n// Team name mappings and aliases\nconst NFL_TEAM_MAPPINGS = {\n    // AFC East\n    \"Buffalo Bills\": [\n        \"Bills\",\n        \"Buffalo\",\n        \"BUF\"\n    ],\n    \"Miami Dolphins\": [\n        \"Dolphins\",\n        \"Miami\",\n        \"MIA\"\n    ],\n    \"New England Patriots\": [\n        \"Patriots\",\n        \"New England\",\n        \"Pats\",\n        \"NE\"\n    ],\n    \"New York Jets\": [\n        \"Jets\",\n        \"NY Jets\",\n        \"NYJ\"\n    ],\n    // AFC North\n    \"Baltimore Ravens\": [\n        \"Ravens\",\n        \"Baltimore\",\n        \"BAL\"\n    ],\n    \"Cincinnati Bengals\": [\n        \"Bengals\",\n        \"Cincinnati\",\n        \"Cincy\",\n        \"CIN\"\n    ],\n    \"Cleveland Browns\": [\n        \"Browns\",\n        \"Cleveland\",\n        \"CLE\"\n    ],\n    \"Pittsburgh Steelers\": [\n        \"Steelers\",\n        \"Pittsburgh\",\n        \"Pitt\",\n        \"PIT\"\n    ],\n    // AFC South\n    \"Houston Texans\": [\n        \"Texans\",\n        \"Houston\",\n        \"HOU\"\n    ],\n    \"Indianapolis Colts\": [\n        \"Colts\",\n        \"Indianapolis\",\n        \"Indy\",\n        \"IND\"\n    ],\n    \"Jacksonville Jaguars\": [\n        \"Jaguars\",\n        \"Jacksonville\",\n        \"Jags\",\n        \"JAX\",\n        \"JAC\"\n    ],\n    \"Tennessee Titans\": [\n        \"Titans\",\n        \"Tennessee\",\n        \"TEN\"\n    ],\n    // AFC West\n    \"Denver Broncos\": [\n        \"Broncos\",\n        \"Denver\",\n        \"DEN\"\n    ],\n    \"Kansas City Chiefs\": [\n        \"Chiefs\",\n        \"Kansas City\",\n        \"KC\",\n        \"KC Chiefs\"\n    ],\n    \"Las Vegas Raiders\": [\n        \"Raiders\",\n        \"Las Vegas\",\n        \"LV\",\n        \"LVR\",\n        \"Oakland Raiders\"\n    ],\n    \"Los Angeles Chargers\": [\n        \"Chargers\",\n        \"LA Chargers\",\n        \"L.A. Chargers\",\n        \"LAC\",\n        \"San Diego Chargers\"\n    ],\n    // NFC East\n    \"Dallas Cowboys\": [\n        \"Cowboys\",\n        \"Dallas\",\n        \"DAL\"\n    ],\n    \"New York Giants\": [\n        \"Giants\",\n        \"NY Giants\",\n        \"NYG\"\n    ],\n    \"Philadelphia Eagles\": [\n        \"Eagles\",\n        \"Philadelphia\",\n        \"Philly\",\n        \"PHI\"\n    ],\n    \"Washington Commanders\": [\n        \"Commanders\",\n        \"Washington\",\n        \"WAS\",\n        \"Washington Football Team\",\n        \"Redskins\"\n    ],\n    // NFC North\n    \"Chicago Bears\": [\n        \"Bears\",\n        \"Chicago\",\n        \"CHI\"\n    ],\n    \"Detroit Lions\": [\n        \"Lions\",\n        \"Detroit\",\n        \"DET\"\n    ],\n    \"Green Bay Packers\": [\n        \"Packers\",\n        \"Green Bay\",\n        \"GB\",\n        \"GBP\"\n    ],\n    \"Minnesota Vikings\": [\n        \"Vikings\",\n        \"Minnesota\",\n        \"MIN\"\n    ],\n    // NFC South\n    \"Atlanta Falcons\": [\n        \"Falcons\",\n        \"Atlanta\",\n        \"ATL\"\n    ],\n    \"Carolina Panthers\": [\n        \"Panthers\",\n        \"Carolina\",\n        \"CAR\"\n    ],\n    \"New Orleans Saints\": [\n        \"Saints\",\n        \"New Orleans\",\n        \"NO\",\n        \"NOS\"\n    ],\n    \"Tampa Bay Buccaneers\": [\n        \"Buccaneers\",\n        \"Tampa Bay\",\n        \"Tampa\",\n        \"Bucs\",\n        \"TB\",\n        \"TBB\"\n    ],\n    // NFC West\n    \"Arizona Cardinals\": [\n        \"Cardinals\",\n        \"Arizona\",\n        \"ARI\",\n        \"AZ\"\n    ],\n    \"Los Angeles Rams\": [\n        \"Rams\",\n        \"LA Rams\",\n        \"L.A. Rams\",\n        \"LAR\",\n        \"St. Louis Rams\"\n    ],\n    \"San Francisco 49ers\": [\n        \"49ers\",\n        \"San Francisco\",\n        \"SF\",\n        \"SFO\",\n        \"Niners\"\n    ],\n    \"Seattle Seahawks\": [\n        \"Seahawks\",\n        \"Seattle\",\n        \"SEA\"\n    ]\n};\n// Common NCAAF team mappings - expanded for better matching\nconst NCAAF_TEAM_MAPPINGS = {\n    // Major Conference Teams - SEC\n    \"Alabama Crimson Tide\": [\n        \"Alabama\",\n        \"Bama\",\n        \"Crimson Tide\",\n        \"ALA\"\n    ],\n    \"Georgia Bulldogs\": [\n        \"Georgia\",\n        \"UGA\",\n        \"Bulldogs\",\n        \"GA\"\n    ],\n    \"Florida Gators\": [\n        \"Florida\",\n        \"UF\",\n        \"Gators\",\n        \"FLA\"\n    ],\n    \"Tennessee Volunteers\": [\n        \"Tennessee\",\n        \"Vols\",\n        \"UT\",\n        \"TENN\"\n    ],\n    \"LSU Tigers\": [\n        \"LSU\",\n        \"Louisiana State\",\n        \"Louisiana St.\",\n        \"Louisiana State University\"\n    ],\n    \"Auburn Tigers\": [\n        \"Auburn\",\n        \"AU\",\n        \"War Eagle\",\n        \"AUB\"\n    ],\n    \"Texas A&M Aggies\": [\n        \"Texas A&M\",\n        \"A&M\",\n        \"TAMU\",\n        \"Aggies\"\n    ],\n    \"Ole Miss Rebels\": [\n        \"Ole Miss\",\n        \"Mississippi\",\n        \"Miss\",\n        \"MISS\"\n    ],\n    \"Mississippi State Bulldogs\": [\n        \"Mississippi State\",\n        \"Mississippi St.\",\n        \"Miss State\",\n        \"MSU\",\n        \"MSST\"\n    ],\n    \"Arkansas Razorbacks\": [\n        \"Arkansas\",\n        \"Hogs\",\n        \"ARK\"\n    ],\n    \"Kentucky Wildcats\": [\n        \"Kentucky\",\n        \"UK\",\n        \"Wildcats\",\n        \"KY\"\n    ],\n    \"Missouri Tigers\": [\n        \"Missouri\",\n        \"Mizzou\",\n        \"MO\",\n        \"MIZ\"\n    ],\n    \"South Carolina Gamecocks\": [\n        \"South Carolina\",\n        \"USC\",\n        \"Gamecocks\",\n        \"SCAR\"\n    ],\n    \"Vanderbilt Commodores\": [\n        \"Vanderbilt\",\n        \"Vandy\",\n        \"Commodores\",\n        \"VAN\"\n    ],\n    // Big Ten\n    \"Ohio State Buckeyes\": [\n        \"Ohio State\",\n        \"Ohio St.\",\n        \"OSU\",\n        \"Buckeyes\",\n        \"OHST\"\n    ],\n    \"Michigan Wolverines\": [\n        \"Michigan\",\n        \"U of M\",\n        \"UM\",\n        \"Wolverines\",\n        \"MICH\"\n    ],\n    \"Michigan State Spartans\": [\n        \"Michigan State\",\n        \"Michigan St.\",\n        \"MSU\",\n        \"Spartans\",\n        \"MIST\"\n    ],\n    \"Penn State Nittany Lions\": [\n        \"Penn State\",\n        \"Penn St.\",\n        \"PSU\",\n        \"Nittany Lions\",\n        \"PENN\"\n    ],\n    \"Wisconsin Badgers\": [\n        \"Wisconsin\",\n        \"Badgers\",\n        \"WIS\",\n        \"WISC\"\n    ],\n    \"Iowa Hawkeyes\": [\n        \"Iowa\",\n        \"Hawkeyes\",\n        \"IOWA\"\n    ],\n    \"Iowa State Cyclones\": [\n        \"Iowa State\",\n        \"Iowa St.\",\n        \"ISU\",\n        \"Cyclones\",\n        \"IAST\"\n    ],\n    \"Nebraska Cornhuskers\": [\n        \"Nebraska\",\n        \"Huskers\",\n        \"NEB\",\n        \"NEBR\"\n    ],\n    \"Minnesota Golden Gophers\": [\n        \"Minnesota\",\n        \"Gophers\",\n        \"MINN\",\n        \"MIN\"\n    ],\n    \"Indiana Hoosiers\": [\n        \"Indiana\",\n        \"IU\",\n        \"Hoosiers\",\n        \"IND\"\n    ],\n    \"Illinois Fighting Illini\": [\n        \"Illinois\",\n        \"Illini\",\n        \"ILL\",\n        \"ILLI\"\n    ],\n    \"Northwestern Wildcats\": [\n        \"Northwestern\",\n        \"NU\",\n        \"Wildcats\",\n        \"NW\"\n    ],\n    \"Purdue Boilermakers\": [\n        \"Purdue\",\n        \"Boilermakers\",\n        \"PUR\",\n        \"PURD\"\n    ],\n    \"Maryland Terrapins\": [\n        \"Maryland\",\n        \"Terps\",\n        \"Terrapins\",\n        \"MD\"\n    ],\n    \"Rutgers Scarlet Knights\": [\n        \"Rutgers\",\n        \"RU\",\n        \"Scarlet Knights\",\n        \"RUTG\"\n    ],\n    // Big 12\n    \"Texas Longhorns\": [\n        \"Texas\",\n        \"UT\",\n        \"Longhorns\",\n        \"TEX\"\n    ],\n    \"Oklahoma Sooners\": [\n        \"Oklahoma\",\n        \"OU\",\n        \"Sooners\",\n        \"OKLA\"\n    ],\n    \"Oklahoma State Cowboys\": [\n        \"Oklahoma State\",\n        \"Oklahoma St.\",\n        \"OSU\",\n        \"OK State\",\n        \"OKST\"\n    ],\n    \"Texas Tech Red Raiders\": [\n        \"Texas Tech\",\n        \"Tech\",\n        \"TTU\",\n        \"Red Raiders\",\n        \"TXTC\"\n    ],\n    \"Baylor Bears\": [\n        \"Baylor\",\n        \"BU\",\n        \"Bears\",\n        \"BAY\"\n    ],\n    \"TCU Horned Frogs\": [\n        \"TCU\",\n        \"Texas Christian\",\n        \"Horned Frogs\"\n    ],\n    \"Kansas Jayhawks\": [\n        \"Kansas\",\n        \"KU\",\n        \"Jayhawks\",\n        \"KAN\"\n    ],\n    \"Kansas State Wildcats\": [\n        \"Kansas State\",\n        \"Kansas St.\",\n        \"K-State\",\n        \"KSU\",\n        \"KAST\"\n    ],\n    \"West Virginia Mountaineers\": [\n        \"West Virginia\",\n        \"WVU\",\n        \"Mountaineers\",\n        \"WV\"\n    ],\n    \"Cincinnati Bearcats\": [\n        \"Cincinnati\",\n        \"Cincy\",\n        \"UC\",\n        \"Bearcats\",\n        \"CIN\"\n    ],\n    \"Houston Cougars\": [\n        \"Houston\",\n        \"UH\",\n        \"Cougars\",\n        \"HOU\"\n    ],\n    \"UCF Knights\": [\n        \"UCF\",\n        \"Central Florida\",\n        \"Knights\"\n    ],\n    \"BYU Cougars\": [\n        \"BYU\",\n        \"Brigham Young\",\n        \"Cougars\"\n    ],\n    // ACC\n    \"Clemson Tigers\": [\n        \"Clemson\",\n        \"Tigers\",\n        \"CLEM\"\n    ],\n    \"Florida State Seminoles\": [\n        \"Florida State\",\n        \"Florida St.\",\n        \"FSU\",\n        \"Seminoles\",\n        \"FLST\"\n    ],\n    \"Miami Hurricanes\": [\n        \"Miami\",\n        \"The U\",\n        \"Canes\",\n        \"Hurricanes\",\n        \"MIA\"\n    ],\n    \"North Carolina Tar Heels\": [\n        \"North Carolina\",\n        \"UNC\",\n        \"Tar Heels\",\n        \"NC\",\n        \"NCAR\"\n    ],\n    \"North Carolina State Wolfpack\": [\n        \"North Carolina State\",\n        \"NC State\",\n        \"NCSU\",\n        \"Wolfpack\",\n        \"NCST\"\n    ],\n    \"Duke Blue Devils\": [\n        \"Duke\",\n        \"Blue Devils\",\n        \"DUKE\"\n    ],\n    \"Virginia Cavaliers\": [\n        \"Virginia\",\n        \"UVA\",\n        \"Cavaliers\",\n        \"VA\"\n    ],\n    \"Virginia Tech Hokies\": [\n        \"Virginia Tech\",\n        \"VT\",\n        \"Hokies\",\n        \"VTECH\"\n    ],\n    \"Louisville Cardinals\": [\n        \"Louisville\",\n        \"UL\",\n        \"Cardinals\",\n        \"LOU\"\n    ],\n    \"Syracuse Orange\": [\n        \"Syracuse\",\n        \"Cuse\",\n        \"Orange\",\n        \"SYR\"\n    ],\n    \"Pittsburgh Panthers\": [\n        \"Pittsburgh\",\n        \"Pitt\",\n        \"Panthers\",\n        \"PIT\"\n    ],\n    \"Boston College Eagles\": [\n        \"Boston College\",\n        \"BC\",\n        \"Eagles\",\n        \"BOST\"\n    ],\n    \"Wake Forest Demon Deacons\": [\n        \"Wake Forest\",\n        \"Wake\",\n        \"Demon Deacons\",\n        \"WAKE\"\n    ],\n    \"Georgia Tech Yellow Jackets\": [\n        \"Georgia Tech\",\n        \"GT\",\n        \"Yellow Jackets\",\n        \"GATECH\"\n    ],\n    // Pac-12\n    \"Oregon Ducks\": [\n        \"Oregon\",\n        \"Ducks\",\n        \"ORE\",\n        \"OREG\"\n    ],\n    \"Oregon State Beavers\": [\n        \"Oregon State\",\n        \"Oregon St.\",\n        \"OSU\",\n        \"Beavers\",\n        \"ORST\"\n    ],\n    \"Washington Huskies\": [\n        \"Washington\",\n        \"UW\",\n        \"Huskies\",\n        \"WASH\"\n    ],\n    \"Washington State Cougars\": [\n        \"Washington State\",\n        \"Washington St.\",\n        \"WSU\",\n        \"Wazzu\",\n        \"Cougars\",\n        \"WAST\"\n    ],\n    \"USC Trojans\": [\n        \"USC\",\n        \"Southern Cal\",\n        \"Trojans\"\n    ],\n    \"UCLA Bruins\": [\n        \"UCLA\",\n        \"Bruins\"\n    ],\n    \"Stanford Cardinal\": [\n        \"Stanford\",\n        \"Cardinal\",\n        \"STAN\"\n    ],\n    \"California Golden Bears\": [\n        \"California\",\n        \"Cal\",\n        \"Golden Bears\",\n        \"CAL\"\n    ],\n    \"Arizona Wildcats\": [\n        \"Arizona\",\n        \"UA\",\n        \"Wildcats\",\n        \"ARIZ\"\n    ],\n    \"Arizona State Sun Devils\": [\n        \"Arizona State\",\n        \"Arizona St.\",\n        \"ASU\",\n        \"Sun Devils\",\n        \"AZST\"\n    ],\n    \"Colorado Buffaloes\": [\n        \"Colorado\",\n        \"CU\",\n        \"Buffs\",\n        \"Buffaloes\",\n        \"COLO\"\n    ],\n    \"Utah Utes\": [\n        \"Utah\",\n        \"Utes\",\n        \"UTAH\"\n    ],\n    // Other Notable Teams\n    \"Notre Dame Fighting Irish\": [\n        \"Notre Dame\",\n        \"ND\",\n        \"Fighting Irish\",\n        \"Irish\"\n    ],\n    \"Army Black Knights\": [\n        \"Army\",\n        \"Black Knights\",\n        \"ARMY\"\n    ],\n    \"Navy Midshipmen\": [\n        \"Navy\",\n        \"Midshipmen\",\n        \"NAVY\"\n    ],\n    \"Air Force Falcons\": [\n        \"Air Force\",\n        \"Falcons\",\n        \"AFA\"\n    ],\n    // Group of Five - AAC, Mountain West, etc.\n    \"SMU Mustangs\": [\n        \"SMU\",\n        \"Southern Methodist\",\n        \"Mustangs\"\n    ],\n    \"Memphis Tigers\": [\n        \"Memphis\",\n        \"Tigers\",\n        \"MEM\"\n    ],\n    \"Tulane Green Wave\": [\n        \"Tulane\",\n        \"Green Wave\",\n        \"TULN\"\n    ],\n    \"Tulsa Golden Hurricane\": [\n        \"Tulsa\",\n        \"Golden Hurricane\",\n        \"TULS\"\n    ],\n    \"South Florida Bulls\": [\n        \"South Florida\",\n        \"S. Florida\",\n        \"USF\",\n        \"Bulls\"\n    ],\n    \"Temple Owls\": [\n        \"Temple\",\n        \"Owls\",\n        \"TEM\"\n    ],\n    \"East Carolina Pirates\": [\n        \"East Carolina\",\n        \"ECU\",\n        \"Pirates\"\n    ],\n    \"Boise State Broncos\": [\n        \"Boise State\",\n        \"Boise St.\",\n        \"BSU\",\n        \"Broncos\",\n        \"BOIS\"\n    ],\n    \"Fresno State Bulldogs\": [\n        \"Fresno State\",\n        \"Fresno St.\",\n        \"Bulldogs\",\n        \"FRES\"\n    ],\n    \"San Diego State Aztecs\": [\n        \"San Diego State\",\n        \"San Diego St.\",\n        \"SDSU\",\n        \"Aztecs\"\n    ],\n    \"UNLV Rebels\": [\n        \"UNLV\",\n        \"Nevada Las Vegas\",\n        \"Rebels\"\n    ],\n    \"Nevada Wolf Pack\": [\n        \"Nevada\",\n        \"Wolf Pack\",\n        \"NEV\"\n    ],\n    \"Hawaii Rainbow Warriors\": [\n        \"Hawaii\",\n        \"Rainbow Warriors\",\n        \"HAW\"\n    ],\n    \"San Jose State Spartans\": [\n        \"San Jose State\",\n        \"San Jose St.\",\n        \"SJSU\",\n        \"Spartans\"\n    ],\n    // Additional Teams\n    \"UAB Blazers\": [\n        \"UAB\",\n        \"Alabama Birmingham\",\n        \"Blazers\"\n    ],\n    \"UTSA Roadrunners\": [\n        \"UTSA\",\n        \"UT San Antonio\",\n        \"Roadrunners\"\n    ],\n    \"UTEP Miners\": [\n        \"UTEP\",\n        \"UT El Paso\",\n        \"Miners\"\n    ],\n    \"Rice Owls\": [\n        \"Rice\",\n        \"Owls\",\n        \"RICE\"\n    ],\n    \"North Texas Mean Green\": [\n        \"North Texas\",\n        \"UNT\",\n        \"Mean Green\",\n        \"NTEX\"\n    ],\n    \"Charlotte 49ers\": [\n        \"Charlotte\",\n        \"Charlotte 49ers\",\n        \"CHAR\",\n        \"49ers\"\n    ],\n    \"Marshall Thundering Herd\": [\n        \"Marshall\",\n        \"Thundering Herd\",\n        \"MRSH\"\n    ],\n    \"Western Michigan Broncos\": [\n        \"Western Michigan\",\n        \"Western Mich\",\n        \"WMU\",\n        \"Broncos\",\n        \"WMICH\"\n    ],\n    \"Central Michigan Chippewas\": [\n        \"Central Michigan\",\n        \"Central Mich\",\n        \"CMU\",\n        \"Chippewas\",\n        \"CMICH\"\n    ],\n    \"Eastern Michigan Eagles\": [\n        \"Eastern Michigan\",\n        \"Eastern Mich\",\n        \"EMU\",\n        \"Eagles\",\n        \"EMICH\"\n    ],\n    \"Northern Illinois Huskies\": [\n        \"Northern Illinois\",\n        \"Northern Ill\",\n        \"NIU\",\n        \"Huskies\",\n        \"NILL\"\n    ],\n    \"Toledo Rockets\": [\n        \"Toledo\",\n        \"Rockets\",\n        \"TOL\"\n    ],\n    \"Bowling Green Falcons\": [\n        \"Bowling Green\",\n        \"BGSU\",\n        \"Falcons\",\n        \"BGWL\"\n    ],\n    \"Kent State Golden Flashes\": [\n        \"Kent State\",\n        \"Kent St.\",\n        \"Golden Flashes\",\n        \"KENT\"\n    ],\n    \"Akron Zips\": [\n        \"Akron\",\n        \"Zips\",\n        \"AKR\"\n    ],\n    \"Ohio Bobcats\": [\n        \"Ohio\",\n        \"Bobcats\",\n        \"OHIO\"\n    ],\n    \"Miami (OH) RedHawks\": [\n        \"Miami (OH)\",\n        \"Miami Ohio\",\n        \"Miami-Ohio\",\n        \"RedHawks\",\n        \"MIOH\"\n    ],\n    \"Ball State Cardinals\": [\n        \"Ball State\",\n        \"Ball St.\",\n        \"Cardinals\",\n        \"BALL\"\n    ],\n    \"Buffalo Bulls\": [\n        \"Buffalo\",\n        \"Bulls\",\n        \"BUFF\"\n    ],\n    // FCS Teams that sometimes play FBS\n    \"James Madison Dukes\": [\n        \"James Madison\",\n        \"JMU\",\n        \"Dukes\",\n        \"JMAD\"\n    ],\n    \"Liberty Flames\": [\n        \"Liberty\",\n        \"Flames\",\n        \"LIB\"\n    ],\n    \"Jacksonville State Gamecocks\": [\n        \"Jacksonville State\",\n        \"Jacksonville St.\",\n        \"JSU\",\n        \"Gamecocks\",\n        \"JKST\"\n    ],\n    \"Sam Houston State Bearkats\": [\n        \"Sam Houston State\",\n        \"Sam Houston St.\",\n        \"SHSU\",\n        \"Bearkats\",\n        \"SHST\"\n    ],\n    \"Missouri State Bears\": [\n        \"Missouri State\",\n        \"Missouri St.\",\n        \"Bears\",\n        \"MOST\"\n    ],\n    \"Arkansas State Red Wolves\": [\n        \"Arkansas State\",\n        \"Arkansas St.\",\n        \"Red Wolves\",\n        \"ARST\"\n    ],\n    \"Georgia State Panthers\": [\n        \"Georgia State\",\n        \"Georgia St.\",\n        \"Panthers\",\n        \"GAST\"\n    ],\n    \"Georgia Southern Eagles\": [\n        \"Georgia Southern\",\n        \"Eagles\",\n        \"GASOU\"\n    ],\n    \"Louisiana Tech Bulldogs\": [\n        \"Louisiana Tech\",\n        \"La Tech\",\n        \"Bulldogs\",\n        \"LTECH\"\n    ],\n    \"UL Monroe Warhawks\": [\n        \"UL Monroe\",\n        \"Louisiana Monroe\",\n        \"ULM\",\n        \"Warhawks\",\n        \"ULMON\"\n    ],\n    \"South Alabama Jaguars\": [\n        \"South Alabama\",\n        \"USA\",\n        \"Jaguars\",\n        \"SALA\"\n    ],\n    \"Troy Trojans\": [\n        \"Troy\",\n        \"Trojans\",\n        \"TROY\"\n    ],\n    \"Middle Tennessee Blue Raiders\": [\n        \"Middle Tennessee\",\n        \"Middle Tenn\",\n        \"MTSU\",\n        \"Blue Raiders\",\n        \"MTENN\"\n    ],\n    \"Western Kentucky Hilltoppers\": [\n        \"Western Kentucky\",\n        \"WKU\",\n        \"Hilltoppers\",\n        \"WKEN\"\n    ],\n    \"FIU Panthers\": [\n        \"FIU\",\n        \"Florida International\",\n        \"Panthers\"\n    ],\n    \"FAU Owls\": [\n        \"FAU\",\n        \"Florida Atlantic\",\n        \"Owls\"\n    ],\n    \"Louisiana Ragin' Cajuns\": [\n        \"Louisiana\",\n        \"Louisiana Lafayette\",\n        \"ULL\",\n        \"Ragin' Cajuns\",\n        \"LALA\"\n    ],\n    \"New Mexico State Aggies\": [\n        \"New Mexico State\",\n        \"New Mexico St.\",\n        \"NMSU\",\n        \"Aggies\",\n        \"NMST\"\n    ],\n    \"New Mexico Lobos\": [\n        \"New Mexico\",\n        \"Lobos\",\n        \"NMEX\"\n    ],\n    \"Utah State Aggies\": [\n        \"Utah State\",\n        \"Utah St.\",\n        \"USU\",\n        \"Aggies\",\n        \"UTST\"\n    ],\n    \"Wyoming Cowboys\": [\n        \"Wyoming\",\n        \"Cowboys\",\n        \"WYO\"\n    ],\n    \"Colorado State Rams\": [\n        \"Colorado State\",\n        \"Colorado St.\",\n        \"CSU\",\n        \"Rams\",\n        \"COST\"\n    ],\n    // Additional small schools\n    \"Connecticut Huskies\": [\n        \"Connecticut\",\n        \"UConn\",\n        \"Huskies\",\n        \"CONN\"\n    ],\n    \"UMass Minutemen\": [\n        \"UMass\",\n        \"Massachusetts\",\n        \"Minutemen\",\n        \"UMAS\"\n    ],\n    \"Old Dominion Monarchs\": [\n        \"Old Dominion\",\n        \"ODU\",\n        \"Monarchs\",\n        \"ODOM\"\n    ],\n    \"Coastal Carolina Chanticleers\": [\n        \"Coastal Carolina\",\n        \"CCU\",\n        \"Chanticleers\",\n        \"CCAR\"\n    ],\n    \"Appalachian State Mountaineers\": [\n        \"Appalachian State\",\n        \"App State\",\n        \"Mountaineers\",\n        \"APPS\"\n    ],\n    \"Texas State Bobcats\": [\n        \"Texas State\",\n        \"Texas St.\",\n        \"Bobcats\",\n        \"TXST\"\n    ],\n    \"Southern Miss Golden Eagles\": [\n        \"Southern Miss\",\n        \"Southern Mississippi\",\n        \"USM\",\n        \"Golden Eagles\",\n        \"SMIS\"\n    ],\n    \"Delaware Blue Hens\": [\n        \"Delaware\",\n        \"Blue Hens\",\n        \"DEL\"\n    ],\n    \"Kennesaw State Owls\": [\n        \"Kennesaw State\",\n        \"Kennesaw St.\",\n        \"KSU\",\n        \"Owls\",\n        \"KENN\"\n    ]\n};\n// Common NCAAF team patterns\nconst NCAAF_PATTERNS = {\n    stateSchools: [\n        \"State\",\n        \"University\",\n        \"College\",\n        \"Tech\",\n        \"A&M\"\n    ],\n    commonAbbreviations: Object.keys(NCAAF_TEAM_MAPPINGS).reduce((acc, team)=>{\n        const abbreviations = NCAAF_TEAM_MAPPINGS[team].filter((alias)=>alias.length <= 4 && alias === alias.toUpperCase());\n        abbreviations.forEach((abbr)=>{\n            acc[abbr] = team;\n        });\n        return acc;\n    }, {})\n};\nclass EntityResolver {\n    constructor(openaiApiKey){\n        // Initialize Fuse.js for NFL teams\n        const nflTeams = Object.entries(NFL_TEAM_MAPPINGS).map(([name, aliases])=>({\n                name,\n                aliases\n            }));\n        this.nflFuse = new fuse_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](nflTeams, {\n            keys: [\n                \"name\",\n                \"aliases\"\n            ],\n            threshold: 0.4,\n            includeScore: true,\n            minMatchCharLength: 3\n        });\n        // Initialize Fuse.js for NCAAF teams\n        const ncaafTeams = Object.entries(NCAAF_TEAM_MAPPINGS).map(([name, aliases])=>({\n                name,\n                aliases\n            }));\n        this.ncaafFuse = new fuse_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"](ncaafTeams, {\n            keys: [\n                \"name\",\n                \"aliases\"\n            ],\n            threshold: 0.4,\n            includeScore: true,\n            minMatchCharLength: 3\n        });\n        // Initialize OpenAI if API key is provided\n        if (openaiApiKey || process.env.OPENAI_API_KEY) {\n            this.openai = new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n                apiKey: openaiApiKey || process.env.OPENAI_API_KEY\n            });\n        }\n    }\n    /**\n   * Normalize team name for matching\n   */ normalizeTeamName(name) {\n        return name.trim().replace(/[^\\w\\s]/g, \"\") // Remove special characters\n        .replace(/\\s+/g, \" \") // Normalize whitespace\n        .toLowerCase();\n    }\n    /**\n   * Check for exact match or alias match for NFL teams\n   */ findNFLTeamExact(teamName) {\n        const normalized = this.normalizeTeamName(teamName);\n        // Check each team and its aliases\n        for (const [officialName, aliases] of Object.entries(NFL_TEAM_MAPPINGS)){\n            const normalizedOfficial = this.normalizeTeamName(officialName);\n            if (normalizedOfficial === normalized) {\n                return {\n                    originalName: teamName,\n                    matchedName: officialName,\n                    confidence: 1.0,\n                    league: \"NFL\",\n                    method: \"exact\"\n                };\n            }\n            // Check aliases\n            for (const alias of aliases){\n                if (this.normalizeTeamName(alias) === normalized) {\n                    return {\n                        originalName: teamName,\n                        matchedName: officialName,\n                        confidence: 0.95,\n                        league: \"NFL\",\n                        method: \"alias\"\n                    };\n                }\n            }\n        }\n        return null;\n    }\n    /**\n   * Use fuzzy matching for NFL teams\n   */ findNFLTeamFuzzy(teamName) {\n        const results = this.nflFuse.search(teamName);\n        if (results.length > 0) {\n            const topMatch = results[0];\n            const confidence = 1 - (topMatch.score || 0 // Convert Fuse score to confidence\n            );\n            if (confidence > 0.6) {\n                return {\n                    originalName: teamName,\n                    matchedName: topMatch.item.name,\n                    confidence: confidence * 0.9,\n                    league: \"NFL\",\n                    method: \"fuzzy\",\n                    candidates: results.slice(0, 3).map((r)=>({\n                            name: r.item.name,\n                            score: 1 - (r.score || 0)\n                        }))\n                };\n            }\n        }\n        return null;\n    }\n    /**\n   * Check for exact match or alias match for NCAAF teams\n   */ findNCAAFTeamExact(teamName) {\n        const normalized = this.normalizeTeamName(teamName);\n        // Remove ranking if present\n        const cleanName = teamName.replace(/^#\\d+\\s*/, \"\");\n        const normalizedClean = this.normalizeTeamName(cleanName);\n        // Check each team and its aliases\n        for (const [officialName, aliases] of Object.entries(NCAAF_TEAM_MAPPINGS)){\n            const normalizedOfficial = this.normalizeTeamName(officialName);\n            if (normalizedOfficial === normalized || normalizedOfficial === normalizedClean) {\n                return {\n                    originalName: teamName,\n                    matchedName: officialName,\n                    confidence: 1.0,\n                    league: \"NCAAF\",\n                    method: \"exact\"\n                };\n            }\n            // Check aliases\n            for (const alias of aliases){\n                if (this.normalizeTeamName(alias) === normalized || this.normalizeTeamName(alias) === normalizedClean) {\n                    return {\n                        originalName: teamName,\n                        matchedName: officialName,\n                        confidence: 0.95,\n                        league: \"NCAAF\",\n                        method: \"alias\"\n                    };\n                }\n            }\n        }\n        return null;\n    }\n    /**\n   * Use fuzzy matching for NCAAF teams\n   */ findNCAAFTeamFuzzy(teamName) {\n        // Remove ranking if present\n        const cleanName = teamName.replace(/^#\\d+\\s*/, \"\");\n        const results = this.ncaafFuse.search(cleanName);\n        if (results.length > 0) {\n            const topMatch = results[0];\n            const confidence = 1 - (topMatch.score || 0);\n            if (confidence > 0.6) {\n                return {\n                    originalName: teamName,\n                    matchedName: topMatch.item.name,\n                    confidence: confidence * 0.9,\n                    league: \"NCAAF\",\n                    method: \"fuzzy\",\n                    candidates: results.slice(0, 3).map((r)=>({\n                            name: r.item.name,\n                            score: 1 - (r.score || 0)\n                        }))\n                };\n            }\n        }\n        return null;\n    }\n    /**\n   * Detect if a team is likely NCAAF based on patterns\n   */ isLikelyNCAA(teamName) {\n        const name = teamName.toLowerCase();\n        // Check for state school patterns\n        if (NCAAF_PATTERNS.stateSchools.some((pattern)=>name.includes(pattern.toLowerCase()))) {\n            return true;\n        }\n        // Check for known abbreviations\n        if (Object.keys(NCAAF_PATTERNS.commonAbbreviations).some((abbr)=>name.includes(abbr.toLowerCase()))) {\n            return true;\n        }\n        // Check for rankings (e.g., \"#1\", \"#11\")\n        if (/^#\\d+/.test(teamName.trim())) {\n            return true;\n        }\n        return false;\n    }\n    /**\n   * Match a single team name\n   */ async matchTeam(teamName, league) {\n        // Try NFL exact match first (unless explicitly NCAAF)\n        if (league !== \"NCAAF\") {\n            const nflExact = this.findNFLTeamExact(teamName);\n            if (nflExact) {\n                return nflExact;\n            }\n        }\n        // If league is specified as NCAAF or team is likely NCAA\n        if (league === \"NCAAF\" || this.isLikelyNCAA(teamName)) {\n            // Try exact NCAAF match first\n            const ncaafExact = this.findNCAAFTeamExact(teamName);\n            if (ncaafExact) {\n                return ncaafExact;\n            }\n            // Try fuzzy NCAAF match\n            const ncaafFuzzy = this.findNCAAFTeamFuzzy(teamName);\n            if (ncaafFuzzy) {\n                return ncaafFuzzy;\n            }\n        }\n        // Try NFL fuzzy matching if not explicitly NCAAF\n        if (league !== \"NCAAF\") {\n            const nflFuzzy = this.findNFLTeamFuzzy(teamName);\n            if (nflFuzzy) {\n                return nflFuzzy;\n            }\n        }\n        // If still no match and likely NCAA, return with medium confidence\n        if (this.isLikelyNCAA(teamName)) {\n            return {\n                originalName: teamName,\n                matchedName: teamName.replace(/^#\\d+\\s*/, \"\"),\n                confidence: 0.7,\n                league: \"NCAAF\",\n                method: \"fuzzy\"\n            };\n        }\n        // Check if it might be NCAAF that we missed\n        const ncaafExact = this.findNCAAFTeamExact(teamName);\n        if (ncaafExact) {\n            return ncaafExact;\n        }\n        const ncaafFuzzy = this.findNCAAFTeamFuzzy(teamName);\n        if (ncaafFuzzy) {\n            return ncaafFuzzy;\n        }\n        // If no match found and likely NCAA, return as NCAA\n        if (this.isLikelyNCAA(teamName)) {\n            return {\n                originalName: teamName,\n                matchedName: teamName.replace(/^#\\d+\\s*/, \"\"),\n                confidence: 0.6,\n                league: \"NCAAF\",\n                method: \"fuzzy\"\n            };\n        }\n        // Default to low confidence match\n        return {\n            originalName: teamName,\n            matchedName: teamName,\n            confidence: 0.3,\n            league: league || \"NFL\",\n            method: \"fuzzy\"\n        };\n    }\n    /**\n   * Match a game with home and away teams\n   */ async matchGame(homeTeam, awayTeam, league) {\n        const [homeMatch, awayMatch] = await Promise.all([\n            this.matchTeam(homeTeam, league),\n            this.matchTeam(awayTeam, league)\n        ]);\n        const overallConfidence = (homeMatch.confidence + awayMatch.confidence) / 2;\n        const needsVerification = overallConfidence < 0.7 || homeMatch.confidence < 0.6 || awayMatch.confidence < 0.6;\n        return {\n            homeTeam: homeMatch,\n            awayTeam: awayMatch,\n            overallConfidence,\n            needsVerification\n        };\n    }\n    /**\n   * Use LLM to verify ambiguous matches\n   */ async verifyWithLLM(originalName, candidates, context) {\n        if (!this.openai) {\n            console.warn(\"OpenAI not configured for LLM verification\");\n            return null;\n        }\n        try {\n            const prompt = `Match the team name \"${originalName}\" to the most likely official team name from these candidates: ${candidates.join(\", \")}.\n      ${context?.league ? `League: ${context.league}` : \"\"}\n      ${context?.otherTeam ? `Playing against: ${context.otherTeam}` : \"\"}\n      \n      Respond with only the exact team name from the list, or \"NONE\" if no good match.`;\n            const completion = await this.openai.chat.completions.create({\n                model: \"gpt-4o-mini\",\n                messages: [\n                    {\n                        role: \"system\",\n                        content: \"You are a sports team name matcher. Respond only with the team name or NONE.\"\n                    },\n                    {\n                        role: \"user\",\n                        content: prompt\n                    }\n                ],\n                temperature: 0,\n                max_tokens: 50\n            });\n            const response = completion.choices[0].message.content?.trim();\n            if (response && response !== \"NONE\" && candidates.includes(response)) {\n                return {\n                    matchedName: response,\n                    confidence: 0.85\n                };\n            }\n        } catch (error) {\n            console.error(\"LLM verification failed:\", error);\n        }\n        return null;\n    }\n    /**\n   * Batch match multiple games\n   */ async matchGames(games) {\n        return Promise.all(games.map((game)=>this.matchGame(game.homeTeam, game.awayTeam, game.league)));\n    }\n    /**\n   * Get all NFL team names and aliases for reference\n   */ static getAllNFLTeams() {\n        return Object.entries(NFL_TEAM_MAPPINGS).map(([official, aliases])=>({\n                official,\n                aliases\n            }));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/entity-resolution.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/llm-picksheet-parser.ts":
/*!**********************************************!*\
  !*** ./src/services/llm-picksheet-parser.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LLMPicksheetParser: () => (/* binding */ LLMPicksheetParser)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"(rsc)/./node_modules/openai/index.mjs\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n\n\n// Initialize OpenAI client\nconst openai = new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n    apiKey: process.env.OPENAI_API_KEY\n});\n// Define the schema for a single game\nconst GameSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    league: zod__WEBPACK_IMPORTED_MODULE_1__[\"enum\"]([\n        \"NFL\",\n        \"NCAAF\"\n    ]).describe(\"League: NFL or NCAAF (college football)\"),\n    awayTeam: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"Away team name (visiting team)\"),\n    awayRecord: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe('Away team record if provided (e.g., \"7-10\")'),\n    awaySpread: zod__WEBPACK_IMPORTED_MODULE_1__.number().describe(\"Away team spread (positive or negative number)\"),\n    homeTeam: zod__WEBPACK_IMPORTED_MODULE_1__.string().describe(\"Home team name (usually in CAPS in the picksheet)\"),\n    homeRecord: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"Home team record if provided\"),\n    homeSpread: zod__WEBPACK_IMPORTED_MODULE_1__.number().describe(\"Home team spread (positive or negative number)\"),\n    gameDay: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe('Day of week (e.g., \"Thu\", \"Fri\", \"Sat\", \"Sun\", \"Mon\")'),\n    gameDate: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe('Game date if provided (e.g., \"January 5, 2025\")'),\n    gameTime: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe('Game time (e.g., \"5:20 PM\", \"1:00 PM\")'),\n    overUnder: zod__WEBPACK_IMPORTED_MODULE_1__.number().optional().describe(\"Over/under total if provided (e.g., 42.5)\"),\n    points: zod__WEBPACK_IMPORTED_MODULE_1__.number().optional().describe(\"Point value for this pick if provided\")\n});\n// Define the schema for the entire picksheet\nconst PicksheetSchema = zod__WEBPACK_IMPORTED_MODULE_1__.object({\n    title: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"Title of the picksheet if provided\"),\n    week: zod__WEBPACK_IMPORTED_MODULE_1__.string().optional().describe(\"Week number or description\"),\n    games: zod__WEBPACK_IMPORTED_MODULE_1__.array(GameSchema).describe(\"List of all games in the picksheet\"),\n    totalGames: zod__WEBPACK_IMPORTED_MODULE_1__.number().describe(\"Total number of games parsed\"),\n    nflGames: zod__WEBPACK_IMPORTED_MODULE_1__.number().describe(\"Number of NFL games\"),\n    ncaafGames: zod__WEBPACK_IMPORTED_MODULE_1__.number().describe(\"Number of NCAAF/college games\")\n});\nclass LLMPicksheetParser {\n    /**\n   * Parse picksheet text using OpenAI with structured output\n   */ static async parseWithLLM(text) {\n        try {\n            // Check API key\n            if (!process.env.OPENAI_API_KEY) {\n                throw new Error(\"OpenAI API key not configured\");\n            }\n            console.log(\"Starting LLM parse with text length:\", text.length);\n            const systemPrompt = `You are an expert sports betting picksheet parser. Your job is to extract structured data from picksheet text and return it as valid JSON.\n\nIMPORTANT: You must return ONLY valid JSON, no other text or explanation.\n\nYou must return a JSON object with this exact structure:\n{\n  \"title\": \"optional title string\",\n  \"week\": \"optional week string\",\n  \"games\": [\n    {\n      \"league\": \"NFL\" or \"NCAAF\",\n      \"awayTeam\": \"team name\",\n      \"awayRecord\": \"optional record\",\n      \"awaySpread\": number,\n      \"homeTeam\": \"team name\",\n      \"homeRecord\": \"optional record\", \n      \"homeSpread\": number,\n      \"gameDay\": \"optional day\",\n      \"gameDate\": \"optional date\",\n      \"gameTime\": \"optional time\",\n      \"overUnder\": optional number,\n      \"points\": optional number\n    }\n  ],\n  \"totalGames\": number,\n  \"nflGames\": number,\n  \"ncaafGames\": number\n}\n\nCRITICAL PARSING RULES:\n\n1. HOME vs AWAY team identification (VERY IMPORTANT):\n   - @ symbol: Team BEFORE @ is AWAY, team AFTER @ is HOME (e.g., \"Buffalo @ New England\" = Buffalo away, New England home)\n   - vs keyword: Team BEFORE vs is HOME, team AFTER vs is AWAY (e.g., \"Dallas vs Washington\" = Dallas home, Washington away)\n   - Capital letters: Team in ALL CAPS is usually HOME (when no @ or vs present)\n   - Default: First team is AWAY, second team is HOME (if no other indicators)\n\n2. Spread parsing:\n   - Each team has opposite spreads (if one is +3.5, the other is -3.5)\n   - The spread belongs to the team it's next to\n   - PK or PICK means 0 spread for both teams\n   - Parse decimal spreads accurately (e.g., -3.5, +7.5)\n\n3. Over/Under (O/U) parsing:\n   - Look for \"O/U\", \"o/u\", \"Over/Under\" followed by a number\n   - This is the total points, store in overUnder field\n   - Common format: \"O/U 42.5\" or \"O/U: 48\"\n\n4. League identification:\n   - NFL teams: Professional teams (Cowboys, Chiefs, Packers, Bills, etc.)\n   - NFL cities: Dallas, Kansas City, Green Bay, Buffalo, etc.\n   - NCAAF indicators: State, University, Tech, A&M, rankings (#1, #11), school names\n\n5. Date and time extraction:\n   - Extract full dates like \"January 5, 2025\" or \"Monday, January 6, 2025\"\n   - Extract days of week (Monday, Tuesday, Sun, Mon, etc.)\n   - Extract times (1:00 PM, 5:20 PM, etc.)\n\n6. Records: Extract if shown in parentheses (e.g., \"(7-10)\", \"(10-2)\")\n\n7. Point values: Extract if shown (e.g., \"1 pt\", \"2 points\")\n\nRemember: Return ONLY valid JSON, no explanations or additional text.`;\n            const userPrompt = `Parse this picksheet and extract all games with their details:\\n\\n${text}`;\n            const completion = await openai.chat.completions.create({\n                model: \"gpt-4o-mini\",\n                messages: [\n                    {\n                        role: \"system\",\n                        content: systemPrompt\n                    },\n                    {\n                        role: \"user\",\n                        content: userPrompt\n                    }\n                ],\n                response_format: {\n                    type: \"json_object\"\n                },\n                temperature: 0,\n                max_tokens: 16000\n            });\n            const responseContent = completion.choices[0].message.content;\n            if (!responseContent) {\n                throw new Error(\"No response from OpenAI\");\n            }\n            console.log(\"Raw LLM response length:\", responseContent.length);\n            // Try to parse the JSON response with better error handling\n            let parsed;\n            try {\n                parsed = JSON.parse(responseContent);\n            } catch (jsonError) {\n                console.error(\"JSON parse error:\", jsonError);\n                console.error(\"Raw response (first 500 chars):\", responseContent.substring(0, 500));\n                console.error(\"Raw response (last 500 chars):\", responseContent.substring(responseContent.length - 500));\n                // Try to fix truncated JSON\n                let fixedContent = responseContent;\n                // Check if response seems truncated (doesn't end with })\n                if (!fixedContent.trim().endsWith(\"}\")) {\n                    console.log(\"Response appears truncated, attempting to fix...\");\n                    // Find the last complete game object\n                    const lastCompleteGameIndex = fixedContent.lastIndexOf(\"},\");\n                    if (lastCompleteGameIndex > 0) {\n                        // Truncate to last complete game and close the JSON properly\n                        fixedContent = fixedContent.substring(0, lastCompleteGameIndex + 1);\n                        // Close the games array and main object\n                        fixedContent += \"],\";\n                        // Count how many games we managed to parse\n                        const gameCount = (fixedContent.match(/\"league\":/g) || []).length;\n                        const nflCount = (fixedContent.match(/\"league\"\\s*:\\s*\"NFL\"/g) || []).length;\n                        const ncaafCount = (fixedContent.match(/\"league\"\\s*:\\s*\"NCAAF\"/g) || []).length;\n                        // Add the summary fields\n                        fixedContent += `\"totalGames\":${gameCount},\"nflGames\":${nflCount},\"ncaafGames\":${ncaafCount}}`;\n                    }\n                }\n                // Remove any trailing commas before closing brackets/braces\n                fixedContent = fixedContent.replace(/,(\\s*[}\\]])/g, \"$1\");\n                // Fix common issues with unterminated strings\n                // Count quotes and add a closing quote if odd number\n                const quoteCount = (fixedContent.match(/\"/g) || []).length;\n                if (quoteCount % 2 !== 0) {\n                    // Find the last quote and check if it's likely unterminated\n                    const lastQuoteIndex = fixedContent.lastIndexOf('\"');\n                    const afterLastQuote = fixedContent.substring(lastQuoteIndex + 1);\n                    // If there's no closing quote before the next JSON structure character\n                    if (!afterLastQuote.includes('\"') && (afterLastQuote.includes(\",\") || afterLastQuote.includes(\"}\") || afterLastQuote.includes(\"]\"))) {\n                        // Insert a closing quote before the next structure character\n                        const structureMatch = afterLastQuote.match(/[,}\\]]/);\n                        if (structureMatch) {\n                            const insertIndex = lastQuoteIndex + 1 + afterLastQuote.indexOf(structureMatch[0]);\n                            fixedContent = fixedContent.substring(0, insertIndex) + '\"' + fixedContent.substring(insertIndex);\n                        }\n                    }\n                }\n                // Try parsing the fixed content\n                try {\n                    parsed = JSON.parse(fixedContent);\n                    console.log(\"Successfully repaired JSON\");\n                } catch (secondError) {\n                    // If still failing, provide more context in the error\n                    console.error(\"Failed to repair JSON:\", secondError);\n                    throw new Error(`Failed to parse LLM response as JSON. Response length: ${responseContent.length}. Error: ${jsonError}`);\n                }\n            }\n            // Clean up games by replacing null with undefined for optional fields\n            const cleanedGames = (parsed.games || []).map((game)=>({\n                    ...game,\n                    awayRecord: game.awayRecord || undefined,\n                    homeRecord: game.homeRecord || undefined,\n                    gameDay: game.gameDay || undefined,\n                    gameDate: game.gameDate || undefined,\n                    gameTime: game.gameTime || undefined,\n                    overUnder: game.overUnder ?? undefined,\n                    points: game.points ?? undefined\n                }));\n            // Validate with Zod and provide defaults for missing fields\n            const result = PicksheetSchema.parse({\n                title: parsed.title || undefined,\n                week: parsed.week || undefined,\n                games: cleanedGames,\n                totalGames: parsed.totalGames || cleanedGames.length || 0,\n                nflGames: parsed.nflGames || cleanedGames.filter((g)=>g.league === \"NFL\").length || 0,\n                ncaafGames: parsed.ncaafGames || cleanedGames.filter((g)=>g.league === \"NCAAF\").length || 0\n            });\n            return result;\n        } catch (error) {\n            console.error(\"Error parsing with LLM:\", error);\n            throw error;\n        }\n    }\n    /**\n   * Convert LLM parsed data to database format\n   */ static toDatabase(parsed, sourceRunId) {\n        return parsed.games.map((game, index)=>({\n                id: `llm-${index + 1}`,\n                source_run_id: sourceRunId || null,\n                league: game.league,\n                event_date_local: game.gameDate || null,\n                event_time_local: game.gameTime || null,\n                home_name_raw: game.homeTeam,\n                away_name_raw: game.awayTeam,\n                home_spread_raw: game.homeSpread,\n                away_spread_raw: game.awaySpread,\n                total_raw: game.overUnder || null,\n                market: \"spread\",\n                raw_text: `${game.awayTeam} ${game.awaySpread} @ ${game.homeTeam} ${game.homeSpread}${game.overUnder ? ` O/U ${game.overUnder}` : \"\"}`,\n                metadata: {\n                    awayRecord: game.awayRecord,\n                    homeRecord: game.homeRecord,\n                    gameDay: game.gameDay,\n                    gameDate: game.gameDate,\n                    points: game.points,\n                    overUnder: game.overUnder,\n                    parsedWithLLM: true\n                }\n            }));\n    }\n    /**\n   * Simple format for display\n   */ static formatForDisplay(parsed) {\n        return parsed.games.map((game)=>({\n                league: game.league,\n                awayTeam: game.awayTeam,\n                awaySpread: game.awaySpread,\n                homeTeam: game.homeTeam,\n                homeSpread: game.homeSpread,\n                overUnder: game.overUnder || null,\n                gameTime: `${game.gameDay || \"\"} ${game.gameDate || \"\"} ${game.gameTime || \"\"}`.trim() || null\n            }));\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/llm-picksheet-parser.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/odds-api.ts":
/*!**********************************!*\
  !*** ./src/services/odds-api.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MARKETS: () => (/* binding */ MARKETS),\n/* harmony export */   OddsAPIService: () => (/* binding */ OddsAPIService),\n/* harmony export */   REGIONS: () => (/* binding */ REGIONS),\n/* harmony export */   SPORTS: () => (/* binding */ SPORTS),\n/* harmony export */   getOddsAPI: () => (/* binding */ getOddsAPI)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"(rsc)/./node_modules/zod/v3/types.js\");\n\n// API Configuration\nconst API_KEY = process.env.THE_ODDS_API_KEY;\nconst BASE_URL = \"https://api.the-odds-api.com/v4\";\n// Sports keys for NFL and NCAAF\nconst SPORTS = {\n    NFL: \"americanfootball_nfl\",\n    NCAAF: \"americanfootball_ncaaf\"\n};\n// Market types\nconst MARKETS = {\n    SPREADS: \"spreads\",\n    TOTALS: \"totals\",\n    H2H: \"h2h\" // head to head (moneyline)\n};\n// Regions for odds\nconst REGIONS = {\n    US: \"us\",\n    UK: \"uk\",\n    EU: \"eu\",\n    AU: \"au\"\n};\n// Zod schemas for type safety\nconst BookmakerSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    key: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    title: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    last_update: zod__WEBPACK_IMPORTED_MODULE_0__.string()\n});\nconst OutcomeSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    price: zod__WEBPACK_IMPORTED_MODULE_0__.number(),\n    point: zod__WEBPACK_IMPORTED_MODULE_0__.number().optional() // For spreads and totals\n});\nconst MarketSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    key: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    last_update: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    outcomes: zod__WEBPACK_IMPORTED_MODULE_0__.array(OutcomeSchema)\n});\nconst OddsResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    id: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    sport_key: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    sport_title: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    commence_time: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    home_team: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    away_team: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    bookmakers: zod__WEBPACK_IMPORTED_MODULE_0__.array(zod__WEBPACK_IMPORTED_MODULE_0__.object({\n        key: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        title: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        last_update: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n        markets: zod__WEBPACK_IMPORTED_MODULE_0__.array(MarketSchema)\n    }))\n});\nconst SportsResponseSchema = zod__WEBPACK_IMPORTED_MODULE_0__.object({\n    key: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    group: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    title: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.string(),\n    active: zod__WEBPACK_IMPORTED_MODULE_0__.boolean(),\n    has_outrights: zod__WEBPACK_IMPORTED_MODULE_0__.boolean()\n});\n// Cache configuration\nconst CACHE_DURATION = 5 * 60 * 1000 // 5 minutes\n;\nconst cache = new Map();\n// Rate limiting\nlet lastRequestTime = 0;\nconst MIN_REQUEST_INTERVAL = 1000 // 1 second between requests\n;\nclass OddsAPIService {\n    constructor(apiKey){\n        this.apiKey = apiKey || API_KEY || \"\";\n        if (!this.apiKey) {\n            throw new Error(\"THE_ODDS_API_KEY is not configured\");\n        }\n    }\n    /**\n   * Rate limit protection\n   */ async enforceRateLimit() {\n        const now = Date.now();\n        const timeSinceLastRequest = now - lastRequestTime;\n        if (timeSinceLastRequest < MIN_REQUEST_INTERVAL) {\n            await new Promise((resolve)=>setTimeout(resolve, MIN_REQUEST_INTERVAL - timeSinceLastRequest));\n        }\n        lastRequestTime = Date.now();\n    }\n    /**\n   * Check cache for data\n   */ getCached(key) {\n        const cached = cache.get(key);\n        if (cached && Date.now() - cached.timestamp < CACHE_DURATION) {\n            console.log(`Cache hit for ${key}`);\n            return cached.data;\n        }\n        return null;\n    }\n    /**\n   * Store data in cache\n   */ setCache(key, data) {\n        cache.set(key, {\n            data,\n            timestamp: Date.now()\n        });\n    }\n    /**\n   * Fetch available sports\n   */ async getSports() {\n        const cacheKey = \"sports\";\n        const cached = this.getCached(cacheKey);\n        if (cached) return cached;\n        await this.enforceRateLimit();\n        const url = `${BASE_URL}/sports?apiKey=${this.apiKey}`;\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`Failed to fetch sports: ${response.statusText}`);\n        }\n        const data = await response.json();\n        const validated = zod__WEBPACK_IMPORTED_MODULE_0__.array(SportsResponseSchema).parse(data);\n        this.setCache(cacheKey, validated);\n        return validated;\n    }\n    /**\n   * Fetch odds for a specific sport\n   */ async getOdds(sport, markets = [\n        MARKETS.SPREADS\n    ], regions = REGIONS.US, oddsFormat = \"american\") {\n        const cacheKey = `odds-${sport}-${markets.join(\",\")}-${regions}`;\n        const cached = this.getCached(cacheKey);\n        if (cached) return cached;\n        await this.enforceRateLimit();\n        const params = new URLSearchParams({\n            apiKey: this.apiKey,\n            regions,\n            markets: markets.join(\",\"),\n            oddsFormat\n        });\n        const url = `${BASE_URL}/sports/${sport}/odds?${params}`;\n        console.log(`Fetching odds from: ${url.replace(this.apiKey, \"REDACTED\")}`);\n        const response = await fetch(url);\n        if (!response.ok) {\n            if (response.status === 401) {\n                throw new Error(\"Invalid API key\");\n            }\n            if (response.status === 429) {\n                throw new Error(\"Rate limit exceeded\");\n            }\n            throw new Error(`Failed to fetch odds: ${response.statusText}`);\n        }\n        // Check remaining requests header\n        const remainingRequests = response.headers.get(\"x-requests-remaining\");\n        const usedRequests = response.headers.get(\"x-requests-used\");\n        console.log(`API Usage - Used: ${usedRequests}, Remaining: ${remainingRequests}`);\n        if (remainingRequests && parseInt(remainingRequests) < 100) {\n            console.warn(`⚠️ Low API requests remaining: ${remainingRequests}`);\n        }\n        const data = await response.json();\n        const validated = zod__WEBPACK_IMPORTED_MODULE_0__.array(OddsResponseSchema).parse(data);\n        this.setCache(cacheKey, validated);\n        return validated;\n    }\n    /**\n   * Get NFL spreads\n   */ async getNFLSpreads() {\n        return this.getOdds(SPORTS.NFL, [\n            MARKETS.SPREADS\n        ]);\n    }\n    /**\n   * Get NCAAF spreads\n   */ async getNCAASpreads() {\n        return this.getOdds(SPORTS.NCAAF, [\n            MARKETS.SPREADS\n        ]);\n    }\n    /**\n   * Get both NFL and NCAAF spreads\n   */ async getAllSpreads() {\n        const [nfl, ncaaf] = await Promise.all([\n            this.getNFLSpreads(),\n            this.getNCAASpreads()\n        ]);\n        return {\n            nfl,\n            ncaaf\n        };\n    }\n    /**\n   * Extract best spread for a game from multiple bookmakers\n   */ static getBestSpread(game) {\n        let bestHomeSpread = null;\n        let bestAwaySpread = null;\n        let bestBookmaker = null;\n        let lastUpdate = null;\n        // Find the spread market from the first available bookmaker\n        for (const bookmaker of game.bookmakers){\n            const spreadMarket = bookmaker.markets.find((m)=>m.key === MARKETS.SPREADS);\n            if (spreadMarket) {\n                const homeOutcome = spreadMarket.outcomes.find((o)=>o.name === game.home_team);\n                const awayOutcome = spreadMarket.outcomes.find((o)=>o.name === game.away_team);\n                if (homeOutcome?.point !== undefined && awayOutcome?.point !== undefined) {\n                    // For simplicity, take the first bookmaker's spread\n                    // In production, you might want to average or find consensus\n                    bestHomeSpread = homeOutcome.point;\n                    bestAwaySpread = awayOutcome.point;\n                    bestBookmaker = bookmaker.title;\n                    lastUpdate = bookmaker.last_update;\n                    break;\n                }\n            }\n        }\n        return {\n            homeTeam: game.home_team,\n            awayTeam: game.away_team,\n            homeSpread: bestHomeSpread,\n            awaySpread: bestAwaySpread,\n            bookmaker: bestBookmaker,\n            lastUpdate\n        };\n    }\n    /**\n   * Format odds data for display\n   */ static formatOddsForDisplay(odds) {\n        return odds.map((game)=>{\n            const spread = this.getBestSpread(game);\n            return {\n                gameId: game.id,\n                homeTeam: spread.homeTeam,\n                awayTeam: spread.awayTeam,\n                homeSpread: spread.homeSpread,\n                awaySpread: spread.awaySpread,\n                gameTime: game.commence_time,\n                bookmaker: spread.bookmaker\n            };\n        });\n    }\n    /**\n   * Clear cache\n   */ static clearCache() {\n        cache.clear();\n        console.log(\"Odds API cache cleared\");\n    }\n}\n// Export a function to get the singleton instance\n// This prevents initialization errors when the module is imported\nconst getOddsAPI = ()=>{\n    if (!process.env.THE_ODDS_API_KEY) {\n        throw new Error(\"THE_ODDS_API_KEY is not configured. Please add it to your .env file.\");\n    }\n    return new OddsAPIService();\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Z0JBQWdCLEVBQUU7UUFDakMsTUFBTSxJQUFJb0QsTUFBTTtJQUNsQjtJQUNBLE9BQU8sSUFBSUg7QUFDYixFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vb2ZmaWNlLWZvb3RiYWxsLXBvb2wvLi9zcmMvc2VydmljZXMvb2Rkcy1hcGkudHM/ODJkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB6IH0gZnJvbSAnem9kJ1xuXG4vLyBBUEkgQ29uZmlndXJhdGlvblxuY29uc3QgQVBJX0tFWSA9IHByb2Nlc3MuZW52LlRIRV9PRERTX0FQSV9LRVlcbmNvbnN0IEJBU0VfVVJMID0gJ2h0dHBzOi8vYXBpLnRoZS1vZGRzLWFwaS5jb20vdjQnXG5cbi8vIFNwb3J0cyBrZXlzIGZvciBORkwgYW5kIE5DQUFGXG5leHBvcnQgY29uc3QgU1BPUlRTID0ge1xuICBORkw6ICdhbWVyaWNhbmZvb3RiYWxsX25mbCcsXG4gIE5DQUFGOiAnYW1lcmljYW5mb290YmFsbF9uY2FhZidcbn0gYXMgY29uc3RcblxuLy8gTWFya2V0IHR5cGVzXG5leHBvcnQgY29uc3QgTUFSS0VUUyA9IHtcbiAgU1BSRUFEUzogJ3NwcmVhZHMnLFxuICBUT1RBTFM6ICd0b3RhbHMnLFxuICBIMkg6ICdoMmgnIC8vIGhlYWQgdG8gaGVhZCAobW9uZXlsaW5lKVxufSBhcyBjb25zdFxuXG4vLyBSZWdpb25zIGZvciBvZGRzXG5leHBvcnQgY29uc3QgUkVHSU9OUyA9IHtcbiAgVVM6ICd1cycsXG4gIFVLOiAndWsnLFxuICBFVTogJ2V1JyxcbiAgQVU6ICdhdSdcbn0gYXMgY29uc3RcblxuLy8gWm9kIHNjaGVtYXMgZm9yIHR5cGUgc2FmZXR5XG5jb25zdCBCb29rbWFrZXJTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGtleTogei5zdHJpbmcoKSxcbiAgdGl0bGU6IHouc3RyaW5nKCksXG4gIGxhc3RfdXBkYXRlOiB6LnN0cmluZygpXG59KVxuXG5jb25zdCBPdXRjb21lU2NoZW1hID0gei5vYmplY3Qoe1xuICBuYW1lOiB6LnN0cmluZygpLFxuICBwcmljZTogei5udW1iZXIoKSxcbiAgcG9pbnQ6IHoubnVtYmVyKCkub3B0aW9uYWwoKSAvLyBGb3Igc3ByZWFkcyBhbmQgdG90YWxzXG59KVxuXG5jb25zdCBNYXJrZXRTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGtleTogei5zdHJpbmcoKSxcbiAgbGFzdF91cGRhdGU6IHouc3RyaW5nKCksXG4gIG91dGNvbWVzOiB6LmFycmF5KE91dGNvbWVTY2hlbWEpXG59KVxuXG5jb25zdCBPZGRzUmVzcG9uc2VTY2hlbWEgPSB6Lm9iamVjdCh7XG4gIGlkOiB6LnN0cmluZygpLFxuICBzcG9ydF9rZXk6IHouc3RyaW5nKCksXG4gIHNwb3J0X3RpdGxlOiB6LnN0cmluZygpLFxuICBjb21tZW5jZV90aW1lOiB6LnN0cmluZygpLFxuICBob21lX3RlYW06IHouc3RyaW5nKCksXG4gIGF3YXlfdGVhbTogei5zdHJpbmcoKSxcbiAgYm9va21ha2Vyczogei5hcnJheSh6Lm9iamVjdCh7XG4gICAga2V5OiB6LnN0cmluZygpLFxuICAgIHRpdGxlOiB6LnN0cmluZygpLFxuICAgIGxhc3RfdXBkYXRlOiB6LnN0cmluZygpLFxuICAgIG1hcmtldHM6IHouYXJyYXkoTWFya2V0U2NoZW1hKVxuICB9KSlcbn0pXG5cbmNvbnN0IFNwb3J0c1Jlc3BvbnNlU2NoZW1hID0gei5vYmplY3Qoe1xuICBrZXk6IHouc3RyaW5nKCksXG4gIGdyb3VwOiB6LnN0cmluZygpLFxuICB0aXRsZTogei5zdHJpbmcoKSxcbiAgZGVzY3JpcHRpb246IHouc3RyaW5nKCksXG4gIGFjdGl2ZTogei5ib29sZWFuKCksXG4gIGhhc19vdXRyaWdodHM6IHouYm9vbGVhbigpXG59KVxuXG4vLyBUeXBlc1xuZXhwb3J0IHR5cGUgT2Rkc1Jlc3BvbnNlID0gei5pbmZlcjx0eXBlb2YgT2Rkc1Jlc3BvbnNlU2NoZW1hPlxuZXhwb3J0IHR5cGUgU3BvcnRzUmVzcG9uc2UgPSB6LmluZmVyPHR5cGVvZiBTcG9ydHNSZXNwb25zZVNjaGVtYT5cbmV4cG9ydCB0eXBlIE1hcmtldCA9IHouaW5mZXI8dHlwZW9mIE1hcmtldFNjaGVtYT5cbmV4cG9ydCB0eXBlIE91dGNvbWUgPSB6LmluZmVyPHR5cGVvZiBPdXRjb21lU2NoZW1hPlxuXG4vLyBDYWNoZSBjb25maWd1cmF0aW9uXG5jb25zdCBDQUNIRV9EVVJBVElPTiA9IDUgKiA2MCAqIDEwMDAgLy8gNSBtaW51dGVzXG5jb25zdCBjYWNoZSA9IG5ldyBNYXA8c3RyaW5nLCB7IGRhdGE6IGFueTsgdGltZXN0YW1wOiBudW1iZXIgfT4oKVxuXG4vLyBSYXRlIGxpbWl0aW5nXG5sZXQgbGFzdFJlcXVlc3RUaW1lID0gMFxuY29uc3QgTUlOX1JFUVVFU1RfSU5URVJWQUwgPSAxMDAwIC8vIDEgc2Vjb25kIGJldHdlZW4gcmVxdWVzdHNcblxuZXhwb3J0IGNsYXNzIE9kZHNBUElTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBhcGlLZXk6IHN0cmluZ1xuXG4gIGNvbnN0cnVjdG9yKGFwaUtleT86IHN0cmluZykge1xuICAgIHRoaXMuYXBpS2V5ID0gYXBpS2V5IHx8IEFQSV9LRVkgfHwgJydcbiAgICBpZiAoIXRoaXMuYXBpS2V5KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RIRV9PRERTX0FQSV9LRVkgaXMgbm90IGNvbmZpZ3VyZWQnKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSYXRlIGxpbWl0IHByb3RlY3Rpb25cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgZW5mb3JjZVJhdGVMaW1pdCgpIHtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpXG4gICAgY29uc3QgdGltZVNpbmNlTGFzdFJlcXVlc3QgPSBub3cgLSBsYXN0UmVxdWVzdFRpbWVcbiAgICBcbiAgICBpZiAodGltZVNpbmNlTGFzdFJlcXVlc3QgPCBNSU5fUkVRVUVTVF9JTlRFUlZBTCkge1xuICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBcbiAgICAgICAgc2V0VGltZW91dChyZXNvbHZlLCBNSU5fUkVRVUVTVF9JTlRFUlZBTCAtIHRpbWVTaW5jZUxhc3RSZXF1ZXN0KVxuICAgICAgKVxuICAgIH1cbiAgICBcbiAgICBsYXN0UmVxdWVzdFRpbWUgPSBEYXRlLm5vdygpXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgY2FjaGUgZm9yIGRhdGFcbiAgICovXG4gIHByaXZhdGUgZ2V0Q2FjaGVkKGtleTogc3RyaW5nKSB7XG4gICAgY29uc3QgY2FjaGVkID0gY2FjaGUuZ2V0KGtleSlcbiAgICBpZiAoY2FjaGVkICYmIERhdGUubm93KCkgLSBjYWNoZWQudGltZXN0YW1wIDwgQ0FDSEVfRFVSQVRJT04pIHtcbiAgICAgIGNvbnNvbGUubG9nKGBDYWNoZSBoaXQgZm9yICR7a2V5fWApXG4gICAgICByZXR1cm4gY2FjaGVkLmRhdGFcbiAgICB9XG4gICAgcmV0dXJuIG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9yZSBkYXRhIGluIGNhY2hlXG4gICAqL1xuICBwcml2YXRlIHNldENhY2hlKGtleTogc3RyaW5nLCBkYXRhOiBhbnkpIHtcbiAgICBjYWNoZS5zZXQoa2V5LCB7IGRhdGEsIHRpbWVzdGFtcDogRGF0ZS5ub3coKSB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEZldGNoIGF2YWlsYWJsZSBzcG9ydHNcbiAgICovXG4gIGFzeW5jIGdldFNwb3J0cygpOiBQcm9taXNlPFNwb3J0c1Jlc3BvbnNlW10+IHtcbiAgICBjb25zdCBjYWNoZUtleSA9ICdzcG9ydHMnXG4gICAgY29uc3QgY2FjaGVkID0gdGhpcy5nZXRDYWNoZWQoY2FjaGVLZXkpXG4gICAgaWYgKGNhY2hlZCkgcmV0dXJuIGNhY2hlZFxuXG4gICAgYXdhaXQgdGhpcy5lbmZvcmNlUmF0ZUxpbWl0KClcblxuICAgIGNvbnN0IHVybCA9IGAke0JBU0VfVVJMfS9zcG9ydHM/YXBpS2V5PSR7dGhpcy5hcGlLZXl9YFxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsKVxuICAgIFxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGZldGNoIHNwb3J0czogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApXG4gICAgfVxuXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKVxuICAgIGNvbnN0IHZhbGlkYXRlZCA9IHouYXJyYXkoU3BvcnRzUmVzcG9uc2VTY2hlbWEpLnBhcnNlKGRhdGEpXG4gICAgXG4gICAgdGhpcy5zZXRDYWNoZShjYWNoZUtleSwgdmFsaWRhdGVkKVxuICAgIHJldHVybiB2YWxpZGF0ZWRcbiAgfVxuXG4gIC8qKlxuICAgKiBGZXRjaCBvZGRzIGZvciBhIHNwZWNpZmljIHNwb3J0XG4gICAqL1xuICBhc3luYyBnZXRPZGRzKFxuICAgIHNwb3J0OiB0eXBlb2YgU1BPUlRTW2tleW9mIHR5cGVvZiBTUE9SVFNdLFxuICAgIG1hcmtldHM6IHN0cmluZ1tdID0gW01BUktFVFMuU1BSRUFEU10sXG4gICAgcmVnaW9uczogc3RyaW5nID0gUkVHSU9OUy5VUyxcbiAgICBvZGRzRm9ybWF0OiAnYW1lcmljYW4nIHwgJ2RlY2ltYWwnID0gJ2FtZXJpY2FuJ1xuICApOiBQcm9taXNlPE9kZHNSZXNwb25zZVtdPiB7XG4gICAgY29uc3QgY2FjaGVLZXkgPSBgb2Rkcy0ke3Nwb3J0fS0ke21hcmtldHMuam9pbignLCcpfS0ke3JlZ2lvbnN9YFxuICAgIGNvbnN0IGNhY2hlZCA9IHRoaXMuZ2V0Q2FjaGVkKGNhY2hlS2V5KVxuICAgIGlmIChjYWNoZWQpIHJldHVybiBjYWNoZWRcblxuICAgIGF3YWl0IHRoaXMuZW5mb3JjZVJhdGVMaW1pdCgpXG5cbiAgICBjb25zdCBwYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKHtcbiAgICAgIGFwaUtleTogdGhpcy5hcGlLZXksXG4gICAgICByZWdpb25zLFxuICAgICAgbWFya2V0czogbWFya2V0cy5qb2luKCcsJyksXG4gICAgICBvZGRzRm9ybWF0XG4gICAgfSlcblxuICAgIGNvbnN0IHVybCA9IGAke0JBU0VfVVJMfS9zcG9ydHMvJHtzcG9ydH0vb2Rkcz8ke3BhcmFtc31gXG4gICAgY29uc29sZS5sb2coYEZldGNoaW5nIG9kZHMgZnJvbTogJHt1cmwucmVwbGFjZSh0aGlzLmFwaUtleSwgJ1JFREFDVEVEJyl9YClcbiAgICBcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybClcbiAgICBcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIEFQSSBrZXknKVxuICAgICAgfVxuICAgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDI5KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUmF0ZSBsaW1pdCBleGNlZWRlZCcpXG4gICAgICB9XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBmZXRjaCBvZGRzOiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YClcbiAgICB9XG5cbiAgICAvLyBDaGVjayByZW1haW5pbmcgcmVxdWVzdHMgaGVhZGVyXG4gICAgY29uc3QgcmVtYWluaW5nUmVxdWVzdHMgPSByZXNwb25zZS5oZWFkZXJzLmdldCgneC1yZXF1ZXN0cy1yZW1haW5pbmcnKVxuICAgIGNvbnN0IHVzZWRSZXF1ZXN0cyA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCd4LXJlcXVlc3RzLXVzZWQnKVxuICAgIFxuICAgIGNvbnNvbGUubG9nKGBBUEkgVXNhZ2UgLSBVc2VkOiAke3VzZWRSZXF1ZXN0c30sIFJlbWFpbmluZzogJHtyZW1haW5pbmdSZXF1ZXN0c31gKVxuICAgIFxuICAgIGlmIChyZW1haW5pbmdSZXF1ZXN0cyAmJiBwYXJzZUludChyZW1haW5pbmdSZXF1ZXN0cykgPCAxMDApIHtcbiAgICAgIGNvbnNvbGUud2Fybihg4pqg77iPIExvdyBBUEkgcmVxdWVzdHMgcmVtYWluaW5nOiAke3JlbWFpbmluZ1JlcXVlc3RzfWApXG4gICAgfVxuXG4gICAgY29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKVxuICAgIGNvbnN0IHZhbGlkYXRlZCA9IHouYXJyYXkoT2Rkc1Jlc3BvbnNlU2NoZW1hKS5wYXJzZShkYXRhKVxuICAgIFxuICAgIHRoaXMuc2V0Q2FjaGUoY2FjaGVLZXksIHZhbGlkYXRlZClcbiAgICByZXR1cm4gdmFsaWRhdGVkXG4gIH1cblxuICAvKipcbiAgICogR2V0IE5GTCBzcHJlYWRzXG4gICAqL1xuICBhc3luYyBnZXRORkxTcHJlYWRzKCk6IFByb21pc2U8T2Rkc1Jlc3BvbnNlW10+IHtcbiAgICByZXR1cm4gdGhpcy5nZXRPZGRzKFNQT1JUUy5ORkwsIFtNQVJLRVRTLlNQUkVBRFNdKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBOQ0FBRiBzcHJlYWRzXG4gICAqL1xuICBhc3luYyBnZXROQ0FBU3ByZWFkcygpOiBQcm9taXNlPE9kZHNSZXNwb25zZVtdPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0T2RkcyhTUE9SVFMuTkNBQUYsIFtNQVJLRVRTLlNQUkVBRFNdKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBib3RoIE5GTCBhbmQgTkNBQUYgc3ByZWFkc1xuICAgKi9cbiAgYXN5bmMgZ2V0QWxsU3ByZWFkcygpOiBQcm9taXNlPHtcbiAgICBuZmw6IE9kZHNSZXNwb25zZVtdXG4gICAgbmNhYWY6IE9kZHNSZXNwb25zZVtdXG4gIH0+IHtcbiAgICBjb25zdCBbbmZsLCBuY2FhZl0gPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICB0aGlzLmdldE5GTFNwcmVhZHMoKSxcbiAgICAgIHRoaXMuZ2V0TkNBQVNwcmVhZHMoKVxuICAgIF0pXG5cbiAgICByZXR1cm4geyBuZmwsIG5jYWFmIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFeHRyYWN0IGJlc3Qgc3ByZWFkIGZvciBhIGdhbWUgZnJvbSBtdWx0aXBsZSBib29rbWFrZXJzXG4gICAqL1xuICBzdGF0aWMgZ2V0QmVzdFNwcmVhZChnYW1lOiBPZGRzUmVzcG9uc2UpOiB7XG4gICAgaG9tZVRlYW06IHN0cmluZ1xuICAgIGF3YXlUZWFtOiBzdHJpbmdcbiAgICBob21lU3ByZWFkOiBudW1iZXIgfCBudWxsXG4gICAgYXdheVNwcmVhZDogbnVtYmVyIHwgbnVsbFxuICAgIGJvb2ttYWtlcjogc3RyaW5nIHwgbnVsbFxuICAgIGxhc3RVcGRhdGU6IHN0cmluZyB8IG51bGxcbiAgfSB7XG4gICAgbGV0IGJlc3RIb21lU3ByZWFkOiBudW1iZXIgfCBudWxsID0gbnVsbFxuICAgIGxldCBiZXN0QXdheVNwcmVhZDogbnVtYmVyIHwgbnVsbCA9IG51bGxcbiAgICBsZXQgYmVzdEJvb2ttYWtlcjogc3RyaW5nIHwgbnVsbCA9IG51bGxcbiAgICBsZXQgbGFzdFVwZGF0ZTogc3RyaW5nIHwgbnVsbCA9IG51bGxcblxuICAgIC8vIEZpbmQgdGhlIHNwcmVhZCBtYXJrZXQgZnJvbSB0aGUgZmlyc3QgYXZhaWxhYmxlIGJvb2ttYWtlclxuICAgIGZvciAoY29uc3QgYm9va21ha2VyIG9mIGdhbWUuYm9va21ha2Vycykge1xuICAgICAgY29uc3Qgc3ByZWFkTWFya2V0ID0gYm9va21ha2VyLm1hcmtldHMuZmluZChtID0+IG0ua2V5ID09PSBNQVJLRVRTLlNQUkVBRFMpXG4gICAgICBcbiAgICAgIGlmIChzcHJlYWRNYXJrZXQpIHtcbiAgICAgICAgY29uc3QgaG9tZU91dGNvbWUgPSBzcHJlYWRNYXJrZXQub3V0Y29tZXMuZmluZChvID0+IG8ubmFtZSA9PT0gZ2FtZS5ob21lX3RlYW0pXG4gICAgICAgIGNvbnN0IGF3YXlPdXRjb21lID0gc3ByZWFkTWFya2V0Lm91dGNvbWVzLmZpbmQobyA9PiBvLm5hbWUgPT09IGdhbWUuYXdheV90ZWFtKVxuICAgICAgICBcbiAgICAgICAgaWYgKGhvbWVPdXRjb21lPy5wb2ludCAhPT0gdW5kZWZpbmVkICYmIGF3YXlPdXRjb21lPy5wb2ludCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgLy8gRm9yIHNpbXBsaWNpdHksIHRha2UgdGhlIGZpcnN0IGJvb2ttYWtlcidzIHNwcmVhZFxuICAgICAgICAgIC8vIEluIHByb2R1Y3Rpb24sIHlvdSBtaWdodCB3YW50IHRvIGF2ZXJhZ2Ugb3IgZmluZCBjb25zZW5zdXNcbiAgICAgICAgICBiZXN0SG9tZVNwcmVhZCA9IGhvbWVPdXRjb21lLnBvaW50XG4gICAgICAgICAgYmVzdEF3YXlTcHJlYWQgPSBhd2F5T3V0Y29tZS5wb2ludFxuICAgICAgICAgIGJlc3RCb29rbWFrZXIgPSBib29rbWFrZXIudGl0bGVcbiAgICAgICAgICBsYXN0VXBkYXRlID0gYm9va21ha2VyLmxhc3RfdXBkYXRlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBob21lVGVhbTogZ2FtZS5ob21lX3RlYW0sXG4gICAgICBhd2F5VGVhbTogZ2FtZS5hd2F5X3RlYW0sXG4gICAgICBob21lU3ByZWFkOiBiZXN0SG9tZVNwcmVhZCxcbiAgICAgIGF3YXlTcHJlYWQ6IGJlc3RBd2F5U3ByZWFkLFxuICAgICAgYm9va21ha2VyOiBiZXN0Qm9va21ha2VyLFxuICAgICAgbGFzdFVwZGF0ZVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGb3JtYXQgb2RkcyBkYXRhIGZvciBkaXNwbGF5XG4gICAqL1xuICBzdGF0aWMgZm9ybWF0T2Rkc0ZvckRpc3BsYXkob2RkczogT2Rkc1Jlc3BvbnNlW10pOiBBcnJheTx7XG4gICAgZ2FtZUlkOiBzdHJpbmdcbiAgICBob21lVGVhbTogc3RyaW5nXG4gICAgYXdheVRlYW06IHN0cmluZ1xuICAgIGhvbWVTcHJlYWQ6IG51bWJlciB8IG51bGxcbiAgICBhd2F5U3ByZWFkOiBudW1iZXIgfCBudWxsXG4gICAgZ2FtZVRpbWU6IHN0cmluZ1xuICAgIGJvb2ttYWtlcjogc3RyaW5nIHwgbnVsbFxuICB9PiB7XG4gICAgcmV0dXJuIG9kZHMubWFwKGdhbWUgPT4ge1xuICAgICAgY29uc3Qgc3ByZWFkID0gdGhpcy5nZXRCZXN0U3ByZWFkKGdhbWUpXG4gICAgICByZXR1cm4ge1xuICAgICAgICBnYW1lSWQ6IGdhbWUuaWQsXG4gICAgICAgIGhvbWVUZWFtOiBzcHJlYWQuaG9tZVRlYW0sXG4gICAgICAgIGF3YXlUZWFtOiBzcHJlYWQuYXdheVRlYW0sXG4gICAgICAgIGhvbWVTcHJlYWQ6IHNwcmVhZC5ob21lU3ByZWFkLFxuICAgICAgICBhd2F5U3ByZWFkOiBzcHJlYWQuYXdheVNwcmVhZCxcbiAgICAgICAgZ2FtZVRpbWU6IGdhbWUuY29tbWVuY2VfdGltZSxcbiAgICAgICAgYm9va21ha2VyOiBzcHJlYWQuYm9va21ha2VyXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhciBjYWNoZVxuICAgKi9cbiAgc3RhdGljIGNsZWFyQ2FjaGUoKSB7XG4gICAgY2FjaGUuY2xlYXIoKVxuICAgIGNvbnNvbGUubG9nKCdPZGRzIEFQSSBjYWNoZSBjbGVhcmVkJylcbiAgfVxufVxuXG4vLyBFeHBvcnQgYSBmdW5jdGlvbiB0byBnZXQgdGhlIHNpbmdsZXRvbiBpbnN0YW5jZVxuLy8gVGhpcyBwcmV2ZW50cyBpbml0aWFsaXphdGlvbiBlcnJvcnMgd2hlbiB0aGUgbW9kdWxlIGlzIGltcG9ydGVkXG5leHBvcnQgY29uc3QgZ2V0T2Rkc0FQSSA9ICgpID0+IHtcbiAgaWYgKCFwcm9jZXNzLmVudi5USEVfT0REU19BUElfS0VZKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdUSEVfT0REU19BUElfS0VZIGlzIG5vdCBjb25maWd1cmVkLiBQbGVhc2UgYWRkIGl0IHRvIHlvdXIgLmVudiBmaWxlLicpXG4gIH1cbiAgcmV0dXJuIG5ldyBPZGRzQVBJU2VydmljZSgpXG59Il0sIm5hbWVzIjpbInoiLCJBUElfS0VZIiwicHJvY2VzcyIsImVudiIsIlRIRV9PRERTX0FQSV9LRVkiLCJCQVNFX1VSTCIsIlNQT1JUUyIsIk5GTCIsIk5DQUFGIiwiTUFSS0VUUyIsIlNQUkVBRFMiLCJUT1RBTFMiLCJIMkgiLCJSRUdJT05TIiwiVVMiLCJVSyIsIkVVIiwiQVUiLCJCb29rbWFrZXJTY2hlbWEiLCJvYmplY3QiLCJrZXkiLCJzdHJpbmciLCJ0aXRsZSIsImxhc3RfdXBkYXRlIiwiT3V0Y29tZVNjaGVtYSIsIm5hbWUiLCJwcmljZSIsIm51bWJlciIsInBvaW50Iiwib3B0aW9uYWwiLCJNYXJrZXRTY2hlbWEiLCJvdXRjb21lcyIsImFycmF5IiwiT2Rkc1Jlc3BvbnNlU2NoZW1hIiwiaWQiLCJzcG9ydF9rZXkiLCJzcG9ydF90aXRsZSIsImNvbW1lbmNlX3RpbWUiLCJob21lX3RlYW0iLCJhd2F5X3RlYW0iLCJib29rbWFrZXJzIiwibWFya2V0cyIsIlNwb3J0c1Jlc3BvbnNlU2NoZW1hIiwiZ3JvdXAiLCJkZXNjcmlwdGlvbiIsImFjdGl2ZSIsImJvb2xlYW4iLCJoYXNfb3V0cmlnaHRzIiwiQ0FDSEVfRFVSQVRJT04iLCJjYWNoZSIsIk1hcCIsImxhc3RSZXF1ZXN0VGltZSIsIk1JTl9SRVFVRVNUX0lOVEVSVkFMIiwiT2Rkc0FQSVNlcnZpY2UiLCJjb25zdHJ1Y3RvciIsImFwaUtleSIsIkVycm9yIiwiZW5mb3JjZVJhdGVMaW1pdCIsIm5vdyIsIkRhdGUiLCJ0aW1lU2luY2VMYXN0UmVxdWVzdCIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCIsImdldENhY2hlZCIsImNhY2hlZCIsImdldCIsInRpbWVzdGFtcCIsImNvbnNvbGUiLCJsb2ciLCJkYXRhIiwic2V0Q2FjaGUiLCJzZXQiLCJnZXRTcG9ydHMiLCJjYWNoZUtleSIsInVybCIsInJlc3BvbnNlIiwiZmV0Y2giLCJvayIsInN0YXR1c1RleHQiLCJqc29uIiwidmFsaWRhdGVkIiwicGFyc2UiLCJnZXRPZGRzIiwic3BvcnQiLCJyZWdpb25zIiwib2Rkc0Zvcm1hdCIsImpvaW4iLCJwYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJyZXBsYWNlIiwic3RhdHVzIiwicmVtYWluaW5nUmVxdWVzdHMiLCJoZWFkZXJzIiwidXNlZFJlcXVlc3RzIiwicGFyc2VJbnQiLCJ3YXJuIiwiZ2V0TkZMU3ByZWFkcyIsImdldE5DQUFTcHJlYWRzIiwiZ2V0QWxsU3ByZWFkcyIsIm5mbCIsIm5jYWFmIiwiYWxsIiwiZ2V0QmVzdFNwcmVhZCIsImdhbWUiLCJiZXN0SG9tZVNwcmVhZCIsImJlc3RBd2F5U3ByZWFkIiwiYmVzdEJvb2ttYWtlciIsImxhc3RVcGRhdGUiLCJib29rbWFrZXIiLCJzcHJlYWRNYXJrZXQiLCJmaW5kIiwibSIsImhvbWVPdXRjb21lIiwibyIsImF3YXlPdXRjb21lIiwidW5kZWZpbmVkIiwiaG9tZVRlYW0iLCJhd2F5VGVhbSIsImhvbWVTcHJlYWQiLCJhd2F5U3ByZWFkIiwiZm9ybWF0T2Rkc0ZvckRpc3BsYXkiLCJvZGRzIiwibWFwIiwic3ByZWFkIiwiZ2FtZUlkIiwiZ2FtZVRpbWUiLCJjbGVhckNhY2hlIiwiY2xlYXIiLCJnZXRPZGRzQVBJIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./src/services/odds-api.ts\n");

/***/ }),

/***/ "(rsc)/./src/services/pipeline-orchestrator.ts":
/*!***********************************************!*\
  !*** ./src/services/pipeline-orchestrator.ts ***!
  \***********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PipelineOrchestrator: () => (/* binding */ PipelineOrchestrator),\n/* harmony export */   pipelineOrchestrator: () => (/* binding */ pipelineOrchestrator)\n/* harmony export */ });\n/* harmony import */ var _llm_picksheet_parser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./llm-picksheet-parser */ \"(rsc)/./src/services/llm-picksheet-parser.ts\");\n/* harmony import */ var _odds_api__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./odds-api */ \"(rsc)/./src/services/odds-api.ts\");\n/* harmony import */ var _entity_resolution__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./entity-resolution */ \"(rsc)/./src/services/entity-resolution.ts\");\n/* harmony import */ var _comparison_engine__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./comparison-engine */ \"(rsc)/./src/services/comparison-engine.ts\");\n\n\n\n\nclass PipelineOrchestrator {\n    /**\n   * Main pipeline execution method\n   */ async runPipeline(input, config = {}) {\n        const pipelineId = this.generatePipelineId();\n        const startTime = Date.now();\n        const result = {\n            id: pipelineId,\n            timestamp: new Date().toISOString(),\n            status: \"success\",\n            stage: \"initializing\",\n            config\n        };\n        this.log(`Starting pipeline ${pipelineId}`);\n        try {\n            // Stage 1: Parse picksheet (if text provided)\n            let picksheetGames = input.picksheetGames;\n            if (input.picksheetText && !picksheetGames) {\n                result.parsing = await this.parsePicksheet(input.picksheetText, config.useLLM);\n                if (!result.parsing?.success) {\n                    result.status = \"failed\";\n                    result.stage = \"parsing\";\n                    throw new Error(result.parsing?.error || \"Parsing failed\");\n                }\n                picksheetGames = result.parsing?.games;\n            }\n            if (!picksheetGames || picksheetGames.length === 0) {\n                throw new Error(\"No picksheet games to process\");\n            }\n            // Stage 2: Retrieve market odds\n            let marketGames = input.marketGames;\n            if (config.useOddsAPI && !marketGames) {\n                result.oddsRetrieval = await this.retrieveOdds();\n                if (!result.oddsRetrieval?.success) {\n                    result.status = \"partial\";\n                    result.stage = \"odds_retrieval\";\n                    this.log(`Warning: Odds retrieval failed: ${result.oddsRetrieval?.error || \"Unknown error\"}`);\n                } else {\n                    marketGames = result.oddsRetrieval?.games;\n                }\n            }\n            if (!marketGames || marketGames.length === 0) {\n                throw new Error(\"No market games available for comparison\");\n            }\n            // Stage 3: Match games\n            result.matching = await this.matchGames(picksheetGames, marketGames, config.matchingThreshold);\n            if (result.matching.matchRate === 0) {\n                result.status = \"failed\";\n                result.stage = \"matching\";\n                throw new Error(\"No games could be matched\");\n            } else if (result.matching.matchRate < 0.5) {\n                result.status = \"partial\";\n                this.log(`Warning: Low match rate: ${(result.matching.matchRate * 100).toFixed(1)}%`);\n            }\n            // Stage 4: Compare spreads and calculate KPIs\n            result.comparison = await this.compareGames(picksheetGames, marketGames, result.matching);\n            if (!result.comparison?.success) {\n                result.status = \"partial\";\n                result.stage = \"comparison\";\n            }\n            result.stage = \"completed\";\n            result.totalDuration = Date.now() - startTime;\n            if (config.includeLogs) {\n                result.logs = [\n                    ...this.logs\n                ];\n            }\n            // Store result for retrieval\n            this.results.set(pipelineId, result);\n            this.log(`Pipeline ${pipelineId} completed in ${result.totalDuration}ms`);\n            return result;\n        } catch (error) {\n            result.status = \"failed\";\n            result.totalDuration = Date.now() - startTime;\n            if (config.includeLogs) {\n                result.logs = [\n                    ...this.logs\n                ];\n            }\n            this.log(`Pipeline ${pipelineId} failed: ${error instanceof Error ? error.message : \"Unknown error\"}`);\n            this.results.set(pipelineId, result);\n            throw error;\n        } finally{\n            this.clearLogs();\n            this._lastMatches = null // Clear stored matches\n            ;\n        }\n    }\n    /**\n   * Stage 1: Parse picksheet text\n   */ async parsePicksheet(text, useLLM = true) {\n        const startTime = Date.now();\n        this.currentStage = \"parsing\";\n        this.log(\"Starting picksheet parsing\");\n        try {\n            const parsed = await _llm_picksheet_parser__WEBPACK_IMPORTED_MODULE_0__.LLMPicksheetParser.parseWithLLM(text);\n            if (!parsed || !parsed.games) {\n                return {\n                    success: false,\n                    gamesFound: 0,\n                    error: \"Failed to parse picksheet\",\n                    duration: Date.now() - startTime\n                };\n            }\n            this.log(`Parsed ${parsed.games.length} games from picksheet`);\n            // Convert to our format\n            const games = parsed.games.map((game)=>({\n                    homeTeam: game.homeTeam,\n                    awayTeam: game.awayTeam,\n                    spread: game.homeSpread,\n                    gameDate: game.gameDate || undefined\n                }));\n            return {\n                success: true,\n                gamesFound: games.length,\n                games,\n                duration: Date.now() - startTime\n            };\n        } catch (error) {\n            return {\n                success: false,\n                gamesFound: 0,\n                error: error instanceof Error ? error.message : \"Unknown parsing error\",\n                duration: Date.now() - startTime\n            };\n        }\n    }\n    /**\n   * Stage 2: Retrieve odds from API\n   */ async retrieveOdds() {\n        const startTime = Date.now();\n        this.currentStage = \"odds_retrieval\";\n        this.log(\"Retrieving odds from API\");\n        try {\n            const oddsAPI = (0,_odds_api__WEBPACK_IMPORTED_MODULE_1__.getOddsAPI)();\n            const { nfl, ncaaf } = await oddsAPI.getAllSpreads();\n            // Convert to our format, preserving league information\n            const nflGames = nfl.map((game)=>{\n                const spread = _odds_api__WEBPACK_IMPORTED_MODULE_1__.OddsAPIService.getBestSpread(game);\n                return {\n                    gameId: game.id,\n                    homeTeam: spread.homeTeam,\n                    awayTeam: spread.awayTeam,\n                    homeSpread: spread.homeSpread || 0,\n                    gameTime: game.commence_time,\n                    league: \"NFL\"\n                };\n            });\n            const ncaafGames = ncaaf.map((game)=>{\n                const spread = _odds_api__WEBPACK_IMPORTED_MODULE_1__.OddsAPIService.getBestSpread(game);\n                return {\n                    gameId: game.id,\n                    homeTeam: spread.homeTeam,\n                    awayTeam: spread.awayTeam,\n                    homeSpread: spread.homeSpread || 0,\n                    gameTime: game.commence_time,\n                    league: \"NCAAF\"\n                };\n            });\n            const games = [\n                ...nflGames,\n                ...ncaafGames\n            ];\n            this.log(`Retrieved ${nfl.length} NFL and ${ncaaf.length} NCAAF games`);\n            return {\n                success: true,\n                nflGames: nfl.length,\n                ncaafGames: ncaaf.length,\n                games,\n                duration: Date.now() - startTime\n            };\n        } catch (error) {\n            return {\n                success: false,\n                nflGames: 0,\n                ncaafGames: 0,\n                error: error instanceof Error ? error.message : \"Unknown API error\",\n                duration: Date.now() - startTime\n            };\n        }\n    }\n    /**\n   * Stage 3: Match games between sources\n   */ async matchGames(picksheetGames, marketGames, threshold = 0.6) {\n        const startTime = Date.now();\n        this.currentStage = \"matching\";\n        this.log(\"Matching games between picksheet and market\");\n        try {\n            const resolver = new _entity_resolution__WEBPACK_IMPORTED_MODULE_2__.EntityResolver();\n            const matches = [];\n            for(let pIdx = 0; pIdx < picksheetGames.length; pIdx++){\n                const picksheetGame = picksheetGames[pIdx];\n                let bestMatch = {\n                    marketIndex: -1,\n                    confidence: 0\n                };\n                for(let mIdx = 0; mIdx < marketGames.length; mIdx++){\n                    const marketGame = marketGames[mIdx];\n                    // Match teams\n                    const homeMatch = await resolver.matchTeam(picksheetGame.homeTeam);\n                    const marketHomeMatch = await resolver.matchTeam(marketGame.homeTeam);\n                    const awayMatch = await resolver.matchTeam(picksheetGame.awayTeam);\n                    const marketAwayMatch = await resolver.matchTeam(marketGame.awayTeam);\n                    // Check if teams match (normal or swapped)\n                    const normalMatch = homeMatch.matchedName === marketHomeMatch.matchedName && awayMatch.matchedName === marketAwayMatch.matchedName;\n                    const swappedMatch = homeMatch.matchedName === marketAwayMatch.matchedName && awayMatch.matchedName === marketHomeMatch.matchedName;\n                    if (normalMatch || swappedMatch) {\n                        const confidence = Math.min(homeMatch.confidence, awayMatch.confidence, marketHomeMatch.confidence, marketAwayMatch.confidence);\n                        if (confidence >= threshold && confidence > bestMatch.confidence) {\n                            bestMatch = {\n                                marketIndex: mIdx,\n                                confidence\n                            };\n                        }\n                    }\n                }\n                if (bestMatch.marketIndex !== -1) {\n                    matches.push({\n                        picksheetIndex: pIdx,\n                        marketIndex: bestMatch.marketIndex,\n                        confidence: bestMatch.confidence\n                    });\n                }\n            }\n            const matchRate = matches.length / picksheetGames.length;\n            this.log(`Matched ${matches.length} of ${picksheetGames.length} games (${(matchRate * 100).toFixed(1)}%)`);\n            this._lastMatches = matches;\n            return {\n                success: true,\n                matchRate,\n                matches: matches.length,\n                totalGames: picksheetGames.length,\n                duration: Date.now() - startTime\n            };\n        } catch (error) {\n            return {\n                success: false,\n                matchRate: 0,\n                matches: 0,\n                totalGames: picksheetGames.length,\n                error: error instanceof Error ? error.message : \"Unknown matching error\",\n                duration: Date.now() - startTime\n            };\n        }\n    }\n    /**\n   * Stage 4: Compare games and calculate KPIs\n   */ async compareGames(picksheetGames, marketGames, matchingResult) {\n        const startTime = Date.now();\n        this.currentStage = \"comparison\";\n        this.log(\"Comparing games and calculating KPIs\");\n        try {\n            const result = _comparison_engine__WEBPACK_IMPORTED_MODULE_3__.comparisonEngine.compareGames(picksheetGames, marketGames, this._lastMatches || []);\n            this.log(`Calculated KPIs: Avg delta ${result.kpis.avgSpreadDelta}, Key crossings ${result.kpis.keyNumberCrossings}`);\n            return {\n                success: true,\n                kpis: result.kpis,\n                comparisons: result.comparisons,\n                unmatched: result.unmatched,\n                duration: Date.now() - startTime\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : \"Unknown comparison error\",\n                duration: Date.now() - startTime\n            };\n        }\n    }\n    /**\n   * Get pipeline result by ID\n   */ getPipelineResult(id) {\n        return this.results.get(id);\n    }\n    /**\n   * Get all pipeline results\n   */ getAllResults() {\n        return Array.from(this.results.values()).sort((a, b)=>new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n    }\n    /**\n   * Clear stored results\n   */ clearResults() {\n        this.results.clear();\n        this.log(\"Cleared all pipeline results\");\n    }\n    /**\n   * Get current pipeline stage\n   */ getCurrentStage() {\n        return this.currentStage;\n    }\n    /**\n   * Internal logging\n   */ log(message) {\n        const timestamp = new Date().toISOString();\n        const logEntry = `[${timestamp}] [${this.currentStage}] ${message}`;\n        this.logs.push(logEntry);\n        console.log(logEntry);\n    }\n    /**\n   * Clear logs\n   */ clearLogs() {\n        this.logs = [];\n    }\n    /**\n   * Generate unique pipeline ID\n   */ generatePipelineId() {\n        return `pipeline_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n    }\n    constructor(){\n        this.logs = [];\n        this.currentStage = \"idle\";\n        this.results = new Map();\n    }\n}\n// Export singleton instance\nconst pipelineOrchestrator = new PipelineOrchestrator();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/services/pipeline-orchestrator.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/openai","vendor-chunks/zod","vendor-chunks/fuse.js"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fpipeline%2Frun%2Froute&page=%2Fapi%2Fpipeline%2Frun%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fpipeline%2Frun%2Froute.ts&appDir=%2FUsers%2Fjb%2FDevelopment%2Foffice_football_pool%2Fsrc%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fjb%2FDevelopment%2Foffice_football_pool&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();